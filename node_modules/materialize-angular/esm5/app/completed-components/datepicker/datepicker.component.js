/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
import { INPUT_TYPE } from '../input/input.model';
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent() {
        this.className = DatePickerComponent.defaultProps.className;
        this.disabled = DatePickerComponent.defaultProps.disabled;
        this.displayOtherMonthDays = DatePickerComponent.defaultProps.displayOtherMonthDays;
        this.floatLabel = DatePickerComponent.defaultProps.floatLabel;
        this.format = DatePickerComponent.defaultProps.format;
        this.fullSize = DatePickerComponent.defaultProps.fullSize;
        this.id = DatePickerComponent.defaultProps.id;
        this.name = DatePickerComponent.defaultProps.name;
        this.placeholder = DatePickerComponent.defaultProps.placeholder;
        this.required = DatePickerComponent.defaultProps.required;
        this.inputValue = DatePickerComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isOpen = false;
        this.close = this.close.bind(this);
    }
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.date = this.buildDate(this.inputValue);
    };
    /**
     * @param {?} selectedDate
     * @return {?}
     */
    DatePickerComponent.prototype.onSelectDay = /**
     * @param {?} selectedDate
     * @return {?}
     */
    function (selectedDate) {
        this.isOpen = false;
        this.date = selectedDate.date;
        this.inputValue = this.formatDate(selectedDate.date);
        this.onChange(selectedDate.date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.formatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var day = date.getDate();
        /** @type {?} */
        var month = date.getMonth() + 1;
        /** @type {?} */
        var dayString = day < 10
            ? "0" + day
            : day.toString();
        /** @type {?} */
        var monthString = month < 10
            ? "0" + month
            : month.toString();
        /** @type {?} */
        var yearString = date.getFullYear().toString();
        /** @type {?} */
        var formatedDate = this.format
            .replace('dd', dayString)
            .replace('mm', monthString)
            .replace('yyyy', yearString);
        return formatedDate;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.buildDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var dayStartPosition = this.format.indexOf(DatePickerComponent.DAY_KEY);
        /** @type {?} */
        var monthStartPosition = this.format.indexOf(DatePickerComponent.MONTH_KEY);
        /** @type {?} */
        var yearStartPosition = this.format.indexOf(DatePickerComponent.YEAR_KEY);
        if (dayStartPosition >= 0 && monthStartPosition >= 0 && yearStartPosition >= 0) {
            /** @type {?} */
            var dayEndPosition = dayStartPosition + DatePickerComponent.DAY_KEY.length;
            /** @type {?} */
            var monthEndPosition = monthStartPosition + DatePickerComponent.MONTH_KEY.length;
            /** @type {?} */
            var yearEndPosition = yearStartPosition + DatePickerComponent.YEAR_KEY.length;
            /** @type {?} */
            var dayString = value.substring(dayStartPosition, dayEndPosition);
            /** @type {?} */
            var monthString = value.substring(monthStartPosition, monthEndPosition);
            /** @type {?} */
            var yearString = value.substring(yearStartPosition, yearEndPosition);
            if (dayString && monthString && yearString) {
                /** @type {?} */
                var day = Number(dayString);
                /** @type {?} */
                var month = Number(monthString) - 1;
                /** @type {?} */
                var year = Number(yearString);
                return new Date(year, month, day);
            }
        }
        return new Date();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isOpen = true;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.backdropRef.nativeElement.addEventListener('click', _this.close);
        }), 0);
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isOpen = false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.onInputChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.date = this.buildDate(value);
        this.onChange(this.date);
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.onInputFocus = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DatePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.date = value;
        this.inputValue = this.formatDate(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.onTouched = /**
     * @return {?}
     */
    function () { };
    DatePickerComponent.DAY_KEY = 'dd';
    DatePickerComponent.MONTH_KEY = 'mm';
    DatePickerComponent.YEAR_KEY = 'yyyy';
    DatePickerComponent.defaultProps = {
        autocomplete: 'none',
        className: '',
        date: new Date(),
        disabled: false,
        displayOtherMonthDays: true,
        floatLabel: '',
        format: 'dd-mm-yyyy',
        fullSize: false,
        hasCounter: false,
        id: null,
        maxLength: 500,
        name: '',
        placeholder: '',
        required: false,
        type: INPUT_TYPE.TEXT,
        value: ''
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    providers: [{
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatePickerComponent; }))
                        }],
                    selector: config.components.prefix + "-datepicker }",
                    template: "<div [ngClass]=\"[prefix + '-datepicker', className]\" [class.full-size]=\"fullSize\">\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-datepicker-backdrop'\"></div>\n\n  <materialize-input\n    [disabled]=\"disabled\"\n    [floatLabel]=\"floatLabel\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"inputValue\"\n\n    (onChange)=\"onInputChange($event)\"\n    (onFocus)=\"onInputFocus()\"\n  >\n    <materialize-button (onClick)=\"open()\"\n      materializeSuffix\n      [className]=\"prefix + '-datepicker-button'\"\n      [disabled]=\"disabled\"\n    >\n      <materialize-icon [className]=\"prefix + '-datepicker-button'\">calendar_today</materialize-icon>\n    </materialize-button>\n  </materialize-input>\n\n  <materialize-calendar *ngIf=\"isOpen\"\n    [className]=\"prefix + '-datepicker-calendar'\"\n    [date]=\"date\"\n    (onSelectDay)=\"onSelectDay($event)\">\n  </materialize-calendar>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return []; };
    DatePickerComponent.propDecorators = {
        backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        displayOtherMonthDays: [{ type: Input }],
        floatLabel: [{ type: Input }],
        format: [{ type: Input }],
        fullSize: [{ type: Input }],
        id: [{ type: Input }],
        name: [{ type: Input }],
        placeholder: [{ type: Input }],
        required: [{ type: Input }],
        inputValue: [{ type: Input }]
    };
    return DatePickerComponent;
}());
export { DatePickerComponent };
if (false) {
    /** @type {?} */
    DatePickerComponent.DAY_KEY;
    /** @type {?} */
    DatePickerComponent.MONTH_KEY;
    /** @type {?} */
    DatePickerComponent.YEAR_KEY;
    /** @type {?} */
    DatePickerComponent.defaultProps;
    /** @type {?} */
    DatePickerComponent.prototype.backdropRef;
    /** @type {?} */
    DatePickerComponent.prototype.className;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    DatePickerComponent.prototype.floatLabel;
    /** @type {?} */
    DatePickerComponent.prototype.format;
    /** @type {?} */
    DatePickerComponent.prototype.fullSize;
    /** @type {?} */
    DatePickerComponent.prototype.id;
    /** @type {?} */
    DatePickerComponent.prototype.name;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.required;
    /** @type {?} */
    DatePickerComponent.prototype.inputValue;
    /** @type {?} */
    DatePickerComponent.prototype.prefix;
    /** @type {?} */
    DatePickerComponent.prototype.date;
    /** @type {?} */
    DatePickerComponent.prototype.isOpen;
}
//# sourceMappingURL=data:application/json;base64,