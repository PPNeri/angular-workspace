/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { config } from '../../../config';
var GlossaryItemComponent = /** @class */ (function () {
    function GlossaryItemComponent() {
        this.className = GlossaryItemComponent.defaultProps.className;
        this.referenceId = GlossaryItemComponent.defaultProps.referenceId;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    GlossaryItemComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClickEmitter.emit(this.referenceId);
    };
    GlossaryItemComponent.defaultProps = {
        className: '',
        referenceId: ''
    };
    GlossaryItemComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-glossary-item",
                    template: "<li\n  [ngClass]=\"[prefix + '-glossary-item', className]\"\n  [class.active]=\"isActive\"\n>\n  <ng-content></ng-content>\n</li>\n"
                }] }
    ];
    /** @nocollapse */
    GlossaryItemComponent.ctorParameters = function () { return []; };
    GlossaryItemComponent.propDecorators = {
        onClickEmitter: [{ type: Output, args: ['onClick',] }],
        className: [{ type: Input }],
        referenceId: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return GlossaryItemComponent;
}());
export { GlossaryItemComponent };
if (false) {
    /** @type {?} */
    GlossaryItemComponent.defaultProps;
    /** @type {?} */
    GlossaryItemComponent.prototype.onClickEmitter;
    /** @type {?} */
    GlossaryItemComponent.prototype.className;
    /** @type {?} */
    GlossaryItemComponent.prototype.referenceId;
    /** @type {?} */
    GlossaryItemComponent.prototype.prefix;
    /** @type {?} */
    GlossaryItemComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvc3NhcnktaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2dsb3NzYXJ5L2dsb3NzYXJ5LWl0ZW0vZ2xvc3NhcnktaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHekM7SUFtQkU7UUFQUyxjQUFTLEdBQVcscUJBQXFCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNqRSxnQkFBVyxHQUFXLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFFdkUsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBS3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUdELHVDQUFPOzs7O0lBRFAsVUFDUSxLQUFVO1FBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBdEJlLGtDQUFZLEdBQXNCO1FBQ2hELFNBQVMsRUFBRSxFQUFFO1FBQ2IsV0FBVyxFQUFFLEVBQUU7S0FDaEIsQ0FBQzs7Z0JBUkgsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sbUJBQWlCO29CQUN2RCwrSUFBNkM7aUJBQzlDOzs7OztpQ0FPRSxNQUFNLFNBQUMsU0FBUzs0QkFFaEIsS0FBSzs4QkFDTCxLQUFLOzBCQVdMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBSW5DLDRCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0F4QlkscUJBQXFCOzs7SUFDaEMsbUNBR0U7O0lBRUYsK0NBQXdEOztJQUV4RCwwQ0FBMEU7O0lBQzFFLDRDQUE4RTs7SUFFOUUsdUNBQXlDOztJQUV6Qyx5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgR2xvc3NhcnlJdGVtTW9kZWwgfSBmcm9tICcuL2dsb3NzYXJ5LWl0ZW0ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1nbG9zc2FyeS1pdGVtYCxcbiAgdGVtcGxhdGVVcmw6ICcuL2dsb3NzYXJ5LWl0ZW0uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEdsb3NzYXJ5SXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIEdsb3NzYXJ5SXRlbU1vZGVsIHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogR2xvc3NhcnlJdGVtTW9kZWwgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICByZWZlcmVuY2VJZDogJydcbiAgfTtcblxuICBAT3V0cHV0KCdvbkNsaWNrJykgb25DbGlja0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gR2xvc3NhcnlJdGVtQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIHJlZmVyZW5jZUlkOiBzdHJpbmcgPSBHbG9zc2FyeUl0ZW1Db21wb25lbnQuZGVmYXVsdFByb3BzLnJlZmVyZW5jZUlkO1xuXG4gIHB1YmxpYyBwcmVmaXggPSBjb25maWcuY29tcG9uZW50cy5wcmVmaXg7XG5cbiAgcHVibGljIGlzQWN0aXZlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIG9uQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIHRoaXMub25DbGlja0VtaXR0ZXIuZW1pdCh0aGlzLnJlZmVyZW5jZUlkKTtcbiAgfVxufVxuIl19