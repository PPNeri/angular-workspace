/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { config } from '../../config';
import { getOffseTop } from '../../utils/get-offset-top.util';
import { GlossaryItemComponent } from './glossary-item/glossary-item.component';
import { Router } from '@angular/router';
var GlossaryComponent = /** @class */ (function () {
    function GlossaryComponent(router) {
        this.router = router;
        this.className = GlossaryComponent.defaultProps.className;
        this.scrollSpy = GlossaryComponent.defaultProps.scrollSpy;
        this.topSpace = GlossaryComponent.defaultProps.topSpace;
        this.prefix = config.components.prefix;
        this.activeReferenceId = '';
        this.onClickItem = this.onClickItem.bind(this);
        this.registerOptions = this.registerOptions.bind(this);
        this.update = this.update.bind(this);
    }
    /**
     * @return {?}
     */
    GlossaryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.registerOptions();
        setTimeout(this.update, 30);
        if (this.scrollSpy) {
            this.scrollSpy.onChangeEmitter.subscribe((/**
             * @param {?} referenceId
             * @return {?}
             */
            function (referenceId) {
                _this.activeReferenceId = referenceId;
                _this.activeItemByReferenceId(referenceId);
            }));
        }
    };
    /**
     * @return {?}
     */
    GlossaryComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.activeReferenceId = this.getActiveReferenceId();
        this.activeItemByReferenceId(this.activeReferenceId);
        this.scrollTo(this.activeReferenceId);
    };
    /**
     * @param {?} referenceId
     * @return {?}
     */
    GlossaryComponent.prototype.scrollTo = /**
     * @param {?} referenceId
     * @return {?}
     */
    function (referenceId) {
        /** @type {?} */
        var element = document.getElementById(referenceId);
        if (element) {
            /** @type {?} */
            var elementOffsetTop = getOffseTop(element);
            /** @type {?} */
            var scrollTop_1 = elementOffsetTop - this.topSpace;
            setTimeout((/**
             * @return {?}
             */
            function () { return window.scrollTo(0, scrollTop_1); }), 150);
        }
    };
    /**
     * @return {?}
     */
    GlossaryComponent.prototype.getActiveReferenceId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var routerTree = this.router.parseUrl(this.router.url);
        if (routerTree && routerTree.fragment) {
            return routerTree.fragment;
        }
        return '';
    };
    /**
     * @return {?}
     */
    GlossaryComponent.prototype.registerOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.onClickEmitter.subscribe(_this.onClickItem);
        }));
    };
    /**
     * @param {?} referenceId
     * @return {?}
     */
    GlossaryComponent.prototype.onClickItem = /**
     * @param {?} referenceId
     * @return {?}
     */
    function (referenceId) {
        this.activeReferenceId = referenceId;
        this.activeItemByReferenceId(referenceId);
        this.scrollTo(referenceId);
        /** @type {?} */
        var routerTree = this.router.parseUrl(this.router.url);
        var primary = routerTree.root.children.primary;
        /** @type {?} */
        var urlWithoutParams = primary
            ? primary.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            function (segment) { return segment.path; }))
            : routerTree.root.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            function (segment) { return segment.path; }));
        this.router.navigate(urlWithoutParams, { fragment: referenceId });
    };
    /**
     * @param {?} referenceId
     * @return {?}
     */
    GlossaryComponent.prototype.activeItemByReferenceId = /**
     * @param {?} referenceId
     * @return {?}
     */
    function (referenceId) {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.isActive = item.referenceId === referenceId;
        }));
    };
    GlossaryComponent.defaultProps = {
        className: '',
        scrollSpy: null,
        topSpace: 0
    };
    GlossaryComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-glossary",
                    template: "<ul [ngClass]=\"className\">\n  <ng-content></ng-content>\n</ul>\n"
                }] }
    ];
    /** @nocollapse */
    GlossaryComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    GlossaryComponent.propDecorators = {
        items: [{ type: ContentChildren, args: [GlossaryItemComponent,] }],
        className: [{ type: Input }],
        scrollSpy: [{ type: Input }],
        topSpace: [{ type: Input }]
    };
    return GlossaryComponent;
}());
export { GlossaryComponent };
if (false) {
    /** @type {?} */
    GlossaryComponent.defaultProps;
    /** @type {?} */
    GlossaryComponent.prototype.items;
    /** @type {?} */
    GlossaryComponent.prototype.className;
    /** @type {?} */
    GlossaryComponent.prototype.scrollSpy;
    /** @type {?} */
    GlossaryComponent.prototype.topSpace;
    /** @type {?} */
    GlossaryComponent.prototype.prefix;
    /** @type {?} */
    GlossaryComponent.prototype.activeReferenceId;
    /**
     * @type {?}
     * @private
     */
    GlossaryComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,