/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../config';
var ModalComponent = /** @class */ (function () {
    function ModalComponent() {
        this.className = ModalComponent.defaultProps.className;
        this.dismissOnBackdrop = ModalComponent.defaultProps.dismissOnBackdrop;
        this.hasBackdrop = ModalComponent.defaultProps.hasBackdrop;
        this.hasCloseButton = ModalComponent.defaultProps.hasCloseButton;
        this.isOpen = ModalComponent.defaultProps.isOpen;
        this.transitionDuration = ModalComponent.defaultProps.transitionDuration;
        this.prefix = config.components.prefix;
        this.onOpenEmitter = new EventEmitter();
        this.onCloseEmitter = new EventEmitter();
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this.closeByBackdrop = this.closeByBackdrop.bind(this);
    }
    /**
     * @return {?}
     */
    ModalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.hasBackdrop && this.dismissOnBackdrop) {
            this.backdropRef.nativeElement.addEventListener('click', this.closeByBackdrop);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ModalComponent.prototype.closeByBackdrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var target = event.target;
        var nativeElement = this.backdropRef.nativeElement;
        if (target === nativeElement) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    ModalComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.modalRef.nativeElement.style.transitionDuration = this.transitionDuration + "ms";
        this.isOpen = true;
        this.onOpenEmitter.emit();
    };
    /**
     * @return {?}
     */
    ModalComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.modalRef.nativeElement.style.transitionDuration = this.transitionDuration / 2 + "ms";
        this.isOpen = false;
        this.onCloseEmitter.emit();
    };
    ModalComponent.defaultProps = {
        className: '',
        dismissOnBackdrop: true,
        hasBackdrop: true,
        hasCloseButton: true,
        isOpen: false,
        transitionDuration: 400
    };
    ModalComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-modal }",
                    template: "<div [ngClass]=\"[prefix + '-modal', className]\" [class.active]=\"isOpen\" #modal>\n  <div [ngClass]=\"prefix + '-modal-backdrop'\" #backdrop *ngIf=\"hasBackdrop\"></div>\n  <div [ngClass]=\"prefix + '-modal-content'\">\n    <materialize-icon [className]=\"prefix + '-modal-icon-close'\" *ngIf=\"hasCloseButton\" (onClick)=\"close()\">close</materialize-icon>\n\n    <ng-content></ng-content>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ModalComponent.ctorParameters = function () { return []; };
    ModalComponent.propDecorators = {
        modalRef: [{ type: ViewChild, args: ['modal', { static: true },] }],
        backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
        onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
        onCloseEmitter: [{ type: Output, args: ['onClose',] }],
        className: [{ type: Input }],
        dismissOnBackdrop: [{ type: Input }],
        hasBackdrop: [{ type: Input }],
        hasCloseButton: [{ type: Input }],
        isOpen: [{ type: Input }],
        transitionDuration: [{ type: Input }]
    };
    return ModalComponent;
}());
export { ModalComponent };
if (false) {
    /** @type {?} */
    ModalComponent.defaultProps;
    /** @type {?} */
    ModalComponent.prototype.modalRef;
    /** @type {?} */
    ModalComponent.prototype.backdropRef;
    /** @type {?} */
    ModalComponent.prototype.onOpenEmitter;
    /** @type {?} */
    ModalComponent.prototype.onCloseEmitter;
    /** @type {?} */
    ModalComponent.prototype.className;
    /** @type {?} */
    ModalComponent.prototype.dismissOnBackdrop;
    /** @type {?} */
    ModalComponent.prototype.hasBackdrop;
    /** @type {?} */
    ModalComponent.prototype.hasCloseButton;
    /** @type {?} */
    ModalComponent.prototype.isOpen;
    /** @type {?} */
    ModalComponent.prototype.transitionDuration;
    /** @type {?} */
    ModalComponent.prototype.prefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0ZXJpYWxpemUtYW5ndWxhci8iLCJzb3VyY2VzIjpbImFwcC9jb21wbGV0ZWQtY29tcG9uZW50cy9tb2RhbC9tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUd0QztJQTZCRTtRQVRTLGNBQVMsR0FBVyxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUMxRCxzQkFBaUIsR0FBWSxjQUFjLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDO1FBQzNFLGdCQUFXLEdBQVksY0FBYyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDL0QsbUJBQWMsR0FBWSxjQUFjLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQztRQUNyRSxXQUFNLEdBQVksY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDckQsdUJBQWtCLEdBQVcsY0FBYyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQztRQUU5RSxXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFHdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7O0lBRUQsd0NBQWU7OztJQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCx3Q0FBZTs7OztJQUFmLFVBQWdCLEtBQVk7UUFDbEIsSUFBQSxxQkFBTTtRQUNOLElBQUEsOENBQWE7UUFFckIsSUFBSSxNQUFNLEtBQUssYUFBYSxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQzs7OztJQUVELDZCQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBTyxJQUFJLENBQUMsa0JBQWtCLE9BQUssQ0FBQztRQUV4RixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCw4QkFBSzs7O0lBQUw7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEdBQU8sSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsT0FBSyxDQUFDO1FBRTVGLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQTVEZSwyQkFBWSxHQUFlO1FBQ3pDLFNBQVMsRUFBRSxFQUFFO1FBQ2IsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QixXQUFXLEVBQUUsSUFBSTtRQUNqQixjQUFjLEVBQUUsSUFBSTtRQUNwQixNQUFNLEVBQUUsS0FBSztRQUNiLGtCQUFrQixFQUFFLEdBQUc7S0FDeEIsQ0FBQzs7Z0JBWkgsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sYUFBVztvQkFDakQseWFBQXFDO2lCQUN0Qzs7Ozs7MkJBV0UsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7OEJBQ25DLFNBQVMsU0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dDQUV2QyxNQUFNLFNBQUMsUUFBUTtpQ0FDZixNQUFNLFNBQUMsU0FBUzs0QkFFaEIsS0FBSztvQ0FDTCxLQUFLOzhCQUNMLEtBQUs7aUNBQ0wsS0FBSzt5QkFDTCxLQUFLO3FDQUNMLEtBQUs7O0lBeUNSLHFCQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0E5RFksY0FBYzs7O0lBQ3pCLDRCQU9FOztJQUVGLGtDQUEyRDs7SUFDM0QscUNBQWtFOztJQUVsRSx1Q0FBb0Q7O0lBQ3BELHdDQUFzRDs7SUFFdEQsbUNBQW1FOztJQUNuRSwyQ0FBb0Y7O0lBQ3BGLHFDQUF3RTs7SUFDeEUsd0NBQThFOztJQUM5RSxnQ0FBOEQ7O0lBQzlELDRDQUFxRjs7SUFFckYsZ0NBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBNb2RhbE1vZGVsIH0gZnJvbSAnLi9tb2RhbC5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LW1vZGFsIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgTW9kYWxNb2RlbCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IE1vZGFsTW9kZWwgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBkaXNtaXNzT25CYWNrZHJvcDogdHJ1ZSxcbiAgICBoYXNCYWNrZHJvcDogdHJ1ZSxcbiAgICBoYXNDbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgICBpc09wZW46IGZhbHNlLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogNDAwXG4gIH07XG5cbiAgQFZpZXdDaGlsZCgnbW9kYWwnLCB7IHN0YXRpYzogdHJ1ZSB9KSBtb2RhbFJlZjogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnYmFja2Ryb3AnLCB7IHN0YXRpYzogZmFsc2UgfSkgYmFja2Ryb3BSZWY6IEVsZW1lbnRSZWY7XG5cbiAgQE91dHB1dCgnb25PcGVuJykgb25PcGVuRW1pdHRlcjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICBAT3V0cHV0KCdvbkNsb3NlJykgb25DbG9zZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IE1vZGFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGRpc21pc3NPbkJhY2tkcm9wOiBib29sZWFuID0gTW9kYWxDb21wb25lbnQuZGVmYXVsdFByb3BzLmRpc21pc3NPbkJhY2tkcm9wO1xuICBASW5wdXQoKSBoYXNCYWNrZHJvcDogYm9vbGVhbiA9IE1vZGFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5oYXNCYWNrZHJvcDtcbiAgQElucHV0KCkgaGFzQ2xvc2VCdXR0b246IGJvb2xlYW4gPSBNb2RhbENvbXBvbmVudC5kZWZhdWx0UHJvcHMuaGFzQ2xvc2VCdXR0b247XG4gIEBJbnB1dCgpIGlzT3BlbjogYm9vbGVhbiA9IE1vZGFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5pc09wZW47XG4gIEBJbnB1dCgpIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyID0gTW9kYWxDb21wb25lbnQuZGVmYXVsdFByb3BzLnRyYW5zaXRpb25EdXJhdGlvbjtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub25PcGVuRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLm9uQ2xvc2VFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgdGhpcy5vcGVuID0gdGhpcy5vcGVuLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsb3NlQnlCYWNrZHJvcCA9IHRoaXMuY2xvc2VCeUJhY2tkcm9wLmJpbmQodGhpcyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQmFja2Ryb3AgJiYgdGhpcy5kaXNtaXNzT25CYWNrZHJvcCkge1xuICAgICAgdGhpcy5iYWNrZHJvcFJlZi5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZUJ5QmFja2Ryb3ApO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlQnlCYWNrZHJvcChldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG4gICAgY29uc3QgeyBuYXRpdmVFbGVtZW50IH0gPSB0aGlzLmJhY2tkcm9wUmVmO1xuXG4gICAgaWYgKHRhcmdldCA9PT0gbmF0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5tb2RhbFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAkeyB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiB9bXNgO1xuXG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIHRoaXMub25PcGVuRW1pdHRlci5lbWl0KCk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLm1vZGFsUmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7IHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uIC8gMiB9bXNgO1xuXG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLm9uQ2xvc2VFbWl0dGVyLmVtaXQoKTtcbiAgfVxufVxuIl19