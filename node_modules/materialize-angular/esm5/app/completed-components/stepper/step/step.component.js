/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, TemplateRef, ViewChild } from '@angular/core';
import { config } from '../../../config';
var StepComponent = /** @class */ (function () {
    function StepComponent() {
        this.prefix = config.components.prefix;
        this.isCompleted = false;
    }
    StepComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-step }",
                    template: "<ng-template #indicatorTemplate>\n  <div [ngClass]=\"prefix + '-step-indicator'\">\n    <materialize-icon [className]=\"prefix + '-step-indicator-icon'\" *ngIf=\"isCompleted\">done</materialize-icon>\n    <ng-content select=\"materialize-step-indicator\" *ngIf=\"!isCompleted\"></ng-content>\n  </div>\n</ng-template>\n<ng-template #labelTemplate>\n  <ng-content select=\"materialize-step-label\"></ng-content>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    StepComponent.ctorParameters = function () { return []; };
    StepComponent.propDecorators = {
        labelTemplate: [{ type: ViewChild, args: ['labelTemplate', { static: false },] }],
        indicatorTemplate: [{ type: ViewChild, args: ['indicatorTemplate', { static: false },] }]
    };
    return StepComponent;
}());
export { StepComponent };
if (false) {
    /** @type {?} */
    StepComponent.prototype.labelTemplate;
    /** @type {?} */
    StepComponent.prototype.indicatorTemplate;
    /** @type {?} */
    StepComponent.prototype.prefix;
    /** @type {?} */
    StepComponent.prototype.isCompleted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3N0ZXBwZXIvc3RlcC9zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekM7SUFZRTtRQUpPLFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUt2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDOztnQkFkRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxZQUFVO29CQUNoRCx3YkFBb0M7aUJBQ3JDOzs7OztnQ0FFRSxTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtvQ0FDNUMsU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7SUFTbkQsb0JBQUM7Q0FBQSxBQWZELElBZUM7U0FYWSxhQUFhOzs7SUFDeEIsc0NBQStFOztJQUMvRSwwQ0FBdUY7O0lBRXZGLCtCQUF5Qzs7SUFFekMsb0NBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1zdGVwIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU3RlcENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ2xhYmVsVGVtcGxhdGUnLCB7IHN0YXRpYzogZmFsc2UgfSkgbGFiZWxUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQFZpZXdDaGlsZCgnaW5kaWNhdG9yVGVtcGxhdGUnLCB7IHN0YXRpYzogZmFsc2UgfSkgaW5kaWNhdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBwdWJsaWMgaXNDb21wbGV0ZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0NvbXBsZXRlZCA9IGZhbHNlO1xuICB9XG59XG4iXX0=