/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { config } from '../../config';
var HTMLVisualizerComponent = /** @class */ (function () {
    function HTMLVisualizerComponent(sanitizer) {
        this.sanitizer = sanitizer;
        this.className = HTMLVisualizerComponent.defaultProps.className;
        this.html = HTMLVisualizerComponent.defaultProps.html;
        this.prefix = config.components.prefix;
    }
    /**
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.htmlContent = this.render(this.html);
    };
    /**
     * @param {?} html
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.render = /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        /** @type {?} */
        var tags = this.splitByTags(html);
        /** @type {?} */
        var lines = [];
        /** @type {?} */
        var depth = 0;
        for (var i = 0; i < tags.length; i++) {
            /** @type {?} */
            var currentTag = tags[i];
            /** @type {?} */
            var nextTag = tags[i + 1];
            /** @type {?} */
            var lastTag = tags[i + 2];
            /** @type {?} */
            var result = this.createLineLogic(currentTag, nextTag, lastTag, depth, i);
            depth = result.depth;
            i = result.cycle;
            lines.push(result.line);
        }
        return lines.join('<br />');
    };
    /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.createNode = /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    function (content, className) {
        /** @type {?} */
        var escapedContent = content.replace(/&/g, '&amp;');
        escapedContent = escapedContent.trim();
        escapedContent = escapedContent.replace(/\[\[/g, '&#123&#123;');
        escapedContent = escapedContent.replace(/\]\]/g, '&#125&#125;');
        escapedContent = escapedContent.replace(/</g, '&lt;');
        escapedContent = escapedContent.replace(/>/g, '&gt;');
        escapedContent = escapedContent.replace(/(\S+)="([^']*?)"/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            /** @type {?} */
            var value = match.match(/"([^']*?)"/g);
            /** @type {?} */
            var attribute = match.match(/(\S+)=/g);
            /** @type {?} */
            var attributeValidated = (attribute && attribute[0]) || '';
            /** @type {?} */
            var valueValidated = (value && value[0]) || '';
            /** @type {?} */
            var attributeTag = "<span class=\"" + HTMLVisualizerComponent.ATTRIBUTE_CLASS + "\">" + attributeValidated + "</span>";
            /** @type {?} */
            var valueTag = "<span class=\"" + HTMLVisualizerComponent.VALUE_CLASS + "\">" + valueValidated + "</span>";
            return attributeTag + valueTag;
        }));
        escapedContent = escapedContent.replace(/(&lt;\/|&lt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">&lt;" + (match.includes('/') ? '/' : '') + "</span>";
        }));
        escapedContent = escapedContent.replace(/(\/&gt;|&gt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">" + (match.includes('/') ? '/' : '') + "&gt;</span>";
        }));
        return "<span class=\"" + className + "\">" + escapedContent + "</span>";
    };
    /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.indentNode = /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    function (depth, content) {
        /** @type {?} */
        var indentationBase = '&emsp;&emsp;';
        /** @type {?} */
        var indentation = indentationBase.repeat(depth);
        return "" + indentation + content;
    };
    /**
     * @param {?} xml
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.splitByTags = /**
     * @param {?} xml
     * @return {?}
     */
    function (xml) {
        /** @type {?} */
        var tags = xml.split(/(<\/?[^>]+>)/g);
        /** @type {?} */
        var cleanedTags = tags.filter((/**
         * @param {?} line
         * @return {?}
         */
        function (line) { return line.trim() !== ''; }));
        return cleanedTags;
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<[^>!]+>/).test(contentNode);
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isOpeningTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        if (this.isTag(contentNode) && !this.isClosingTag(contentNode) && !this.isSelfClosingTag(contentNode)) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isClosingTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<\/+[^>]+>/).test(contentNode);
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isSelfClosingTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<[^>]+\/>/).test(contentNode);
    };
    /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.createLineLogic = /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    function (firstTag, middleTag, lastTag, depth, cycle) {
        if (this.isOpeningTag(firstTag) && this.isClosingTag(middleTag)) {
            /** @type {?} */
            var openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            var closeNode = this.createNode(middleTag, 'tag');
            return {
                cycle: cycle + 1,
                depth: depth,
                line: this.indentNode(depth, "" + openNode + closeNode)
            };
        }
        if (this.isOpeningTag(firstTag) && !this.isTag(middleTag)) {
            /** @type {?} */
            var openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            var contentNode = this.createNode(middleTag, 'string');
            /** @type {?} */
            var closeNode = this.createNode(lastTag, 'tag');
            return {
                cycle: cycle + 2,
                depth: depth,
                line: this.indentNode(depth, "" + openNode + contentNode + closeNode)
            };
        }
        if (this.isSelfClosingTag(firstTag)) {
            /** @type {?} */
            var selfClosingNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth,
                line: this.indentNode(depth, selfClosingNode)
            };
        }
        if (this.isClosingTag(firstTag)) {
            /** @type {?} */
            var closeNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth - 1,
                line: this.indentNode(depth - 1, closeNode)
            };
        }
        return {
            cycle: cycle,
            depth: depth + 1,
            line: this.indentNode(depth, this.createNode(firstTag, 'text'))
        };
    };
    HTMLVisualizerComponent.ATTRIBUTE_CLASS = config.components.prefix + "-html-visualizer-attribute";
    HTMLVisualizerComponent.VALUE_CLASS = config.components.prefix + "-html-visualizer-value";
    HTMLVisualizerComponent.SYMBOL_CLASS = config.components.prefix + "-html-visualizer-symbol";
    HTMLVisualizerComponent.defaultProps = {
        className: '',
        html: ''
    };
    HTMLVisualizerComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-html-visualizer",
                    template: "<div [ngClass]=\"prefix + '-html-visualizer'\">\n  <div [ngClass]=\"prefix + '-html-visualizer-content'\" [innerHTML]=\"htmlContent\" ngNonBindable></div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    HTMLVisualizerComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    HTMLVisualizerComponent.propDecorators = {
        className: [{ type: Input }],
        html: [{ type: Input }]
    };
    return HTMLVisualizerComponent;
}());
export { HTMLVisualizerComponent };
if (false) {
    /** @type {?} */
    HTMLVisualizerComponent.ATTRIBUTE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.VALUE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.SYMBOL_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.defaultProps;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.className;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.html;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.htmlContent;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    HTMLVisualizerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC12aXN1YWxpemVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvaHRtbC12aXN1YWxpemVyL2h0bWwtdmlzdWFsaXplci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUd0QztJQW9CRSxpQ0FBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQU5sQyxjQUFTLEdBQVcsdUJBQXVCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNuRSxTQUFJLEdBQVcsdUJBQXVCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUczRCxXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFHekMsQ0FBQzs7OztJQUVELDBDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFRCx3Q0FBTTs7OztJQUFOLFVBQU8sSUFBWTs7WUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7O1lBQzdCLEtBQUssR0FBRyxFQUFFOztZQUVaLEtBQUssR0FBRyxDQUFDO1FBRWIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUM5QixVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs7Z0JBQ3BCLE9B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cEYscUNBQXNGOztJQUV0RixxQ0FHRTs7SUFFRiw0Q0FBNEU7O0lBQzVFLHVDQUFrRTs7SUFFbEUsOENBQTZCOztJQUM3Qix5Q0FBeUM7Ozs7O0lBRTdCLDRDQUErQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IEhUTUxWaXN1YWxpemVyTW9kZWwgfSBmcm9tICcuL2h0bWwtdmlzdWFsaXplci5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWh0bWwtdmlzdWFsaXplcmAsXG4gIHRlbXBsYXRlVXJsOiAnLi9odG1sLXZpc3VhbGl6ZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEhUTUxWaXN1YWxpemVyQ29tcG9uZW50IGltcGxlbWVudHMgSFRNTFZpc3VhbGl6ZXJNb2RlbCwgT25Jbml0IHtcbiAgc3RhdGljIHJlYWRvbmx5IEFUVFJJQlVURV9DTEFTUyA9IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1odG1sLXZpc3VhbGl6ZXItYXR0cmlidXRlYDtcbiAgc3RhdGljIHJlYWRvbmx5IFZBTFVFX0NMQVNTID0gYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWh0bWwtdmlzdWFsaXplci12YWx1ZWA7XG4gIHN0YXRpYyByZWFkb25seSBTWU1CT0xfQ0xBU1MgPSBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0taHRtbC12aXN1YWxpemVyLXN5bWJvbGA7XG5cbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogSFRNTFZpc3VhbGl6ZXJNb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGh0bWw6ICcnXG4gIH07XG5cbiAgQElucHV0KCkgY2xhc3NOYW1lOiBzdHJpbmcgPSBIVE1MVmlzdWFsaXplckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSBodG1sOiBzdHJpbmcgPSBIVE1MVmlzdWFsaXplckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuaHRtbDtcblxuICBwdWJsaWMgaHRtbENvbnRlbnQ6IFNhZmVIdG1sO1xuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaHRtbENvbnRlbnQgPSB0aGlzLnJlbmRlcih0aGlzLmh0bWwpO1xuICB9XG5cbiAgcmVuZGVyKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdGFncyA9IHRoaXMuc3BsaXRCeVRhZ3MoaHRtbCk7XG4gICAgY29uc3QgbGluZXMgPSBbXTtcblxuICAgIGxldCBkZXB0aCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUYWcgPSB0YWdzW2ldO1xuICAgICAgY29uc3QgbmV4dFRhZyA9IHRhZ3NbaSArIDFdO1xuICAgICAgY29uc3QgbGFzdFRhZyA9IHRhZ3NbaSArIDJdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNyZWF0ZUxpbmVMb2dpYyhjdXJyZW50VGFnLCBuZXh0VGFnLCBsYXN0VGFnLCBkZXB0aCwgaSk7XG5cbiAgICAgIGRlcHRoID0gcmVzdWx0LmRlcHRoO1xuICAgICAgaSA9IHJlc3VsdC5jeWNsZTtcbiAgICAgIGxpbmVzLnB1c2gocmVzdWx0LmxpbmUpO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5lcy5qb2luKCc8YnIgLz4nKTtcbiAgfVxuXG4gIGNyZWF0ZU5vZGUoY29udGVudDogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZykge1xuICAgIGxldCBlc2NhcGVkQ29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvJi9nLCAnJmFtcDsnKTtcblxuICAgIGVzY2FwZWRDb250ZW50ID0gZXNjYXBlZENvbnRlbnQudHJpbSgpO1xuICAgIGVzY2FwZWRDb250ZW50ID0gZXNjYXBlZENvbnRlbnQucmVwbGFjZSgvXFxbXFxbL2csICcmIzEyMyYjMTIzOycpO1xuICAgIGVzY2FwZWRDb250ZW50ID0gZXNjYXBlZENvbnRlbnQucmVwbGFjZSgvXFxdXFxdL2csICcmIzEyNSYjMTI1OycpO1xuXG4gICAgZXNjYXBlZENvbnRlbnQgPSBlc2NhcGVkQ29udGVudC5yZXBsYWNlKC88L2csICcmbHQ7Jyk7XG4gICAgZXNjYXBlZENvbnRlbnQgPSBlc2NhcGVkQ29udGVudC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG5cbiAgICBlc2NhcGVkQ29udGVudCA9IGVzY2FwZWRDb250ZW50LnJlcGxhY2UoLyhcXFMrKT1cIihbXiddKj8pXCIvZywgbWF0Y2ggPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtYXRjaC5tYXRjaCgvXCIoW14nXSo/KVwiL2cpO1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gbWF0Y2gubWF0Y2goLyhcXFMrKT0vZyk7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVWYWxpZGF0ZWQgPSAoYXR0cmlidXRlICYmIGF0dHJpYnV0ZVswXSkgfHwgJyc7XG4gICAgICBjb25zdCB2YWx1ZVZhbGlkYXRlZCA9ICh2YWx1ZSAmJiB2YWx1ZVswXSkgfHwgJyc7XG5cbiAgICAgIGNvbnN0IGF0dHJpYnV0ZVRhZyA9IGA8c3BhbiBjbGFzcz1cIiR7IEhUTUxWaXN1YWxpemVyQ29tcG9uZW50LkFUVFJJQlVURV9DTEFTUyB9XCI+JHsgYXR0cmlidXRlVmFsaWRhdGVkIH08L3NwYW4+YDtcbiAgICAgIGNvbnN0IHZhbHVlVGFnID0gYDxzcGFuIGNsYXNzPVwiJHsgSFRNTFZpc3VhbGl6ZXJDb21wb25lbnQuVkFMVUVfQ0xBU1MgfVwiPiR7IHZhbHVlVmFsaWRhdGVkIH08L3NwYW4+YDtcblxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZVRhZyArIHZhbHVlVGFnO1xuICAgIH0pO1xuXG4gICAgZXNjYXBlZENvbnRlbnQgPSBlc2NhcGVkQ29udGVudC5yZXBsYWNlKC8oJmx0O1xcL3wmbHQ7KS9nLCBtYXRjaCA9PlxuICAgICAgYDxzcGFuIGNsYXNzPVwiJHsgSFRNTFZpc3VhbGl6ZXJDb21wb25lbnQuU1lNQk9MX0NMQVNTIH1cIj4mbHQ7JHsgbWF0Y2guaW5jbHVkZXMoJy8nKSA/ICcvJyA6ICcnIH08L3NwYW4+YFxuICAgICk7XG5cbiAgICBlc2NhcGVkQ29udGVudCA9IGVzY2FwZWRDb250ZW50LnJlcGxhY2UoLyhcXC8mZ3Q7fCZndDspL2csIG1hdGNoID0+XG4gICAgICBgPHNwYW4gY2xhc3M9XCIkeyBIVE1MVmlzdWFsaXplckNvbXBvbmVudC5TWU1CT0xfQ0xBU1MgfVwiPiR7IG1hdGNoLmluY2x1ZGVzKCcvJykgPyAnLycgOiAnJyB9Jmd0Ozwvc3Bhbj5gXG4gICAgKTtcblxuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCIkeyBjbGFzc05hbWUgfVwiPiR7IGVzY2FwZWRDb250ZW50IH08L3NwYW4+YDtcbiAgfVxuXG4gIGluZGVudE5vZGUoZGVwdGg6IG51bWJlciwgY29udGVudDogc3RyaW5nKSB7XG4gICAgY29uc3QgaW5kZW50YXRpb25CYXNlID0gJyZlbXNwOyZlbXNwOyc7XG4gICAgY29uc3QgaW5kZW50YXRpb24gPSBpbmRlbnRhdGlvbkJhc2UucmVwZWF0KGRlcHRoKTtcblxuICAgIHJldHVybiBgJHsgaW5kZW50YXRpb24gfSR7IGNvbnRlbnQgfWA7XG4gIH1cblxuICBzcGxpdEJ5VGFncyh4bWw6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICAgIGNvbnN0IHRhZ3MgPSB4bWwuc3BsaXQoLyg8XFwvP1tePl0rPikvZyk7XG4gICAgY29uc3QgY2xlYW5lZFRhZ3MgPSB0YWdzLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJyk7XG5cbiAgICByZXR1cm4gY2xlYW5lZFRhZ3M7XG4gIH1cblxuICBpc1RhZyhjb250ZW50Tm9kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICgvPFtePiFdKz4vKS50ZXN0KGNvbnRlbnROb2RlKTtcbiAgfVxuXG4gIGlzT3BlbmluZ1RhZyhjb250ZW50Tm9kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuaXNUYWcoY29udGVudE5vZGUpICYmICF0aGlzLmlzQ2xvc2luZ1RhZyhjb250ZW50Tm9kZSkgJiYgIXRoaXMuaXNTZWxmQ2xvc2luZ1RhZyhjb250ZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzQ2xvc2luZ1RhZyhjb250ZW50Tm9kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICgvPFxcLytbXj5dKz4vKS50ZXN0KGNvbnRlbnROb2RlKTtcbiAgfVxuXG4gIGlzU2VsZkNsb3NpbmdUYWcoY29udGVudE5vZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoLzxbXj5dK1xcLz4vKS50ZXN0KGNvbnRlbnROb2RlKTtcbiAgfVxuXG4gIGNyZWF0ZUxpbmVMb2dpYyhmaXJzdFRhZzogc3RyaW5nLCBtaWRkbGVUYWc6IHN0cmluZywgbGFzdFRhZzogc3RyaW5nLCBkZXB0aDogbnVtYmVyLCBjeWNsZTogbnVtYmVyKTogYW55IHtcbiAgICBpZiAodGhpcy5pc09wZW5pbmdUYWcoZmlyc3RUYWcpICYmIHRoaXMuaXNDbG9zaW5nVGFnKG1pZGRsZVRhZykpIHtcbiAgICAgIGNvbnN0IG9wZW5Ob2RlID0gdGhpcy5jcmVhdGVOb2RlKGZpcnN0VGFnLCAndGFnJyk7XG4gICAgICBjb25zdCBjbG9zZU5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUobWlkZGxlVGFnLCAndGFnJyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN5Y2xlOiBjeWNsZSArIDEsXG4gICAgICAgIGRlcHRoOiBkZXB0aCxcbiAgICAgICAgbGluZTogdGhpcy5pbmRlbnROb2RlKGRlcHRoLCBgJHsgb3Blbk5vZGUgfSR7IGNsb3NlTm9kZSB9YClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNPcGVuaW5nVGFnKGZpcnN0VGFnKSAmJiAhdGhpcy5pc1RhZyhtaWRkbGVUYWcpKSB7XG4gICAgICBjb25zdCBvcGVuTm9kZSA9IHRoaXMuY3JlYXRlTm9kZShmaXJzdFRhZywgJ3RhZycpO1xuICAgICAgY29uc3QgY29udGVudE5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUobWlkZGxlVGFnLCAnc3RyaW5nJyk7XG4gICAgICBjb25zdCBjbG9zZU5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUobGFzdFRhZywgJ3RhZycpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjeWNsZTogY3ljbGUgKyAyLFxuICAgICAgICBkZXB0aDogZGVwdGgsXG4gICAgICAgIGxpbmU6IHRoaXMuaW5kZW50Tm9kZShkZXB0aCwgYCR7IG9wZW5Ob2RlIH0keyBjb250ZW50Tm9kZSB9JHsgY2xvc2VOb2RlIH1gKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NlbGZDbG9zaW5nVGFnKGZpcnN0VGFnKSkge1xuICAgICAgY29uc3Qgc2VsZkNsb3NpbmdOb2RlID0gdGhpcy5jcmVhdGVOb2RlKGZpcnN0VGFnLCAndGFnJyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN5Y2xlOiBjeWNsZSxcbiAgICAgICAgZGVwdGg6IGRlcHRoLFxuICAgICAgICBsaW5lOiB0aGlzLmluZGVudE5vZGUoZGVwdGgsIHNlbGZDbG9zaW5nTm9kZSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNDbG9zaW5nVGFnKGZpcnN0VGFnKSkge1xuICAgICAgY29uc3QgY2xvc2VOb2RlID0gdGhpcy5jcmVhdGVOb2RlKGZpcnN0VGFnLCAndGFnJyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN5Y2xlOiBjeWNsZSxcbiAgICAgICAgZGVwdGg6IGRlcHRoIC0gMSxcbiAgICAgICAgbGluZTogdGhpcy5pbmRlbnROb2RlKGRlcHRoIC0gMSwgY2xvc2VOb2RlKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3ljbGU6IGN5Y2xlLFxuICAgICAgZGVwdGg6IGRlcHRoICsgMSxcbiAgICAgIGxpbmU6IHRoaXMuaW5kZW50Tm9kZShkZXB0aCwgdGhpcy5jcmVhdGVOb2RlKGZpcnN0VGFnLCAndGV4dCcpKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==