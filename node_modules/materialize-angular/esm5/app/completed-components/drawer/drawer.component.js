/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { DRAWER_POSITIONS, DRAWER_TYPES } from './drawer.model';
import { config } from '../../config';
var DrawerComponent = /** @class */ (function () {
    function DrawerComponent(renderer) {
        this.renderer = renderer;
        this.className = DrawerComponent.defaultProps.className;
        this.closeOnBackdrop = DrawerComponent.defaultProps.closeOnBackdrop;
        this.hasBackdrop = DrawerComponent.defaultProps.hasBackdrop;
        this.isOpen = DrawerComponent.defaultProps.isOpen;
        this.position = DrawerComponent.defaultProps.position;
        this.transitionDuration = DrawerComponent.defaultProps.transitionDuration;
        this.type = DrawerComponent.defaultProps.type;
        this.prefix = config.components.prefix;
        this.close = this.close.bind(this);
        this.closeByBackdrop = this.closeByBackdrop.bind(this);
        this.open = this.open.bind(this);
        this.onOpenEmitter = new EventEmitter();
        this.onCloseEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DrawerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.renderer.setStyle(_this.drawerRef.nativeElement, 'transitionDuration', _this.transitionDuration + "ms");
            if (_this.closeOnBackdrop) {
                _this.backdropRef.nativeElement.addEventListener('click', _this.closeByBackdrop);
            }
        }), 0);
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type !== DRAWER_TYPES.STATIC) {
            this.renderer.setStyle(this.backdropRef.nativeElement, 'display', 'block');
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isOpen = true;
            }), 0);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrawerComponent.prototype.closeByBackdrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target === this.backdropRef.nativeElement) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isOpen = false;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.renderer.setStyle(_this.backdropRef.nativeElement, 'display', 'none');
            _this.onCloseEmitter.emit();
        }), this.transitionDuration);
    };
    DrawerComponent.defaultProps = {
        className: '',
        closeOnBackdrop: true,
        hasBackdrop: true,
        isOpen: false,
        position: DRAWER_POSITIONS.LEFT,
        transitionDuration: 250,
        type: DRAWER_TYPES.OVER
    };
    DrawerComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-drawer }",
                    template: "<div #drawer\n  [ngClass]=\"[prefix + '-drawer', className, type, position]\"\n  [class.open]=\"isOpen\"\n  [class.backdrop]=\"hasBackdrop\"\n>\n  <div [ngClass]=\"prefix + '-drawer-backdrop'\" #backdrop></div>\n\n  <div [ngClass]=\"prefix + '-drawer-content'\">\n    <ng-content select=\"materialize-drawer-content\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-drawer-container'\">\n    <ng-content select=\"materialize-drawer-container\"></ng-content>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    DrawerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    DrawerComponent.propDecorators = {
        backdropRef: [{ type: ViewChild, args: ['backdrop', { static: true },] }],
        drawerRef: [{ type: ViewChild, args: ['drawer', { static: true },] }],
        onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
        onCloseEmitter: [{ type: Output, args: ['onClose',] }],
        className: [{ type: Input }],
        closeOnBackdrop: [{ type: Input }],
        hasBackdrop: [{ type: Input }],
        isOpen: [{ type: Input }],
        position: [{ type: Input }],
        transitionDuration: [{ type: Input }],
        type: [{ type: Input }]
    };
    return DrawerComponent;
}());
export { DrawerComponent };
if (false) {
    /** @type {?} */
    DrawerComponent.defaultProps;
    /** @type {?} */
    DrawerComponent.prototype.backdropRef;
    /** @type {?} */
    DrawerComponent.prototype.drawerRef;
    /** @type {?} */
    DrawerComponent.prototype.onOpenEmitter;
    /** @type {?} */
    DrawerComponent.prototype.onCloseEmitter;
    /** @type {?} */
    DrawerComponent.prototype.className;
    /** @type {?} */
    DrawerComponent.prototype.closeOnBackdrop;
    /** @type {?} */
    DrawerComponent.prototype.hasBackdrop;
    /** @type {?} */
    DrawerComponent.prototype.isOpen;
    /** @type {?} */
    DrawerComponent.prototype.position;
    /** @type {?} */
    DrawerComponent.prototype.transitionDuration;
    /** @type {?} */
    DrawerComponent.prototype.type;
    /** @type {?} */
    DrawerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    DrawerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvZHJhd2VyL2RyYXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQWUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXRDO0lBK0JFLHlCQUFvQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBVjlCLGNBQVMsR0FBVyxlQUFlLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUMzRCxvQkFBZSxHQUFZLGVBQWUsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQ3hFLGdCQUFXLEdBQVksZUFBZSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDaEUsV0FBTSxHQUFZLGVBQWUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3RELGFBQVEsR0FBcUIsZUFBZSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDbkUsdUJBQWtCLEdBQVcsZUFBZSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQztRQUM3RSxTQUFJLEdBQWlCLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBRXpELFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUd2QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEdB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UUU7O0lBRUYsc0NBQWlFOztJQUNqRSxvQ0FBNkQ7O0lBRTdELHdDQUFvRDs7SUFDcEQseUNBQXNEOztJQUV0RCxvQ0FBb0U7O0lBQ3BFLDBDQUFpRjs7SUFDakYsc0NBQXlFOztJQUN6RSxpQ0FBK0Q7O0lBQy9ELG1DQUE0RTs7SUFDNUUsNkNBQXNGOztJQUN0RiwrQkFBZ0U7O0lBRWhFLGlDQUF5Qzs7Ozs7SUFFN0IsbUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRFJBV0VSX1BPU0lUSU9OUywgRFJBV0VSX1RZUEVTLCBEcmF3ZXJNb2RlbCB9IGZyb20gJy4vZHJhd2VyLm1vZGVsJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWRyYXdlciB9YCxcbiAgdGVtcGxhdGVVcmw6ICcuL2RyYXdlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRHJhd2VyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IERyYXdlck1vZGVsID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgY2xvc2VPbkJhY2tkcm9wOiB0cnVlLFxuICAgIGhhc0JhY2tkcm9wOiB0cnVlLFxuICAgIGlzT3BlbjogZmFsc2UsXG4gICAgcG9zaXRpb246IERSQVdFUl9QT1NJVElPTlMuTEVGVCxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IDI1MCxcbiAgICB0eXBlOiBEUkFXRVJfVFlQRVMuT1ZFUlxuICB9O1xuXG4gIEBWaWV3Q2hpbGQoJ2JhY2tkcm9wJywgeyBzdGF0aWM6IHRydWUgfSkgYmFja2Ryb3BSZWY6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RyYXdlcicsIHsgc3RhdGljOiB0cnVlIH0pIGRyYXdlclJlZjogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCdvbk9wZW4nKSBvbk9wZW5FbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gIEBPdXRwdXQoJ29uQ2xvc2UnKSBvbkNsb3NlRW1pdHRlcjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gRHJhd2VyQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGNsb3NlT25CYWNrZHJvcDogYm9vbGVhbiA9IERyYXdlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xvc2VPbkJhY2tkcm9wO1xuICBASW5wdXQoKSBoYXNCYWNrZHJvcDogYm9vbGVhbiA9IERyYXdlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuaGFzQmFja2Ryb3A7XG4gIEBJbnB1dCgpIGlzT3BlbjogYm9vbGVhbiA9IERyYXdlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuaXNPcGVuO1xuICBASW5wdXQoKSBwb3NpdGlvbjogRFJBV0VSX1BPU0lUSU9OUyA9IERyYXdlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMucG9zaXRpb247XG4gIEBJbnB1dCgpIHRyYW5zaXRpb25EdXJhdGlvbjogbnVtYmVyID0gRHJhd2VyQ29tcG9uZW50LmRlZmF1bHRQcm9wcy50cmFuc2l0aW9uRHVyYXRpb247XG4gIEBJbnB1dCgpIHR5cGU6IERSQVdFUl9UWVBFUyA9IERyYXdlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMudHlwZTtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZUJ5QmFja2Ryb3AgPSB0aGlzLmNsb3NlQnlCYWNrZHJvcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub3BlbiA9IHRoaXMub3Blbi5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5vbk9wZW5FbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICAgIHRoaXMub25DbG9zZUVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZHJhd2VyUmVmLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2l0aW9uRHVyYXRpb24nLCBgJHsgdGhpcy50cmFuc2l0aW9uRHVyYXRpb24gfW1zYCk7XG5cbiAgICAgIGlmICh0aGlzLmNsb3NlT25CYWNrZHJvcCkge1xuICAgICAgICB0aGlzLmJhY2tkcm9wUmVmLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlQnlCYWNrZHJvcCk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09IERSQVdFUl9UWVBFUy5TVEFUSUMpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5iYWNrZHJvcFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICdibG9jaycpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2VCeUJhY2tkcm9wKGV2ZW50OiBFdmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuYmFja2Ryb3BSZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5iYWNrZHJvcFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgIHRoaXMub25DbG9zZUVtaXR0ZXIuZW1pdCgpO1xuICAgIH0sIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgfVxufVxuIl19