/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { INPUT_TYPE } from './input.model';
import { config } from '../../config';
var InputComponent = /** @class */ (function () {
    function InputComponent() {
        this.autocomplete = InputComponent.defaultProps.autocomplete;
        this.className = InputComponent.defaultProps.className;
        this.disabled = InputComponent.defaultProps.disabled;
        this.floatLabel = InputComponent.defaultProps.floatLabel;
        this.hasCounter = InputComponent.defaultProps.hasCounter;
        this.id = InputComponent.defaultProps.id;
        this.maxLength = InputComponent.defaultProps.maxLength;
        this.name = InputComponent.defaultProps.name;
        this.placeholder = InputComponent.defaultProps.placeholder;
        this.required = InputComponent.defaultProps.required;
        this.type = InputComponent.defaultProps.type;
        this.value = InputComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onChangeEmitter = new EventEmitter();
        this.onFocusEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InputComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = true;
            this.onFocusEmitter.emit();
            this.onTouched();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var value = event.target.value;
        this.value = value;
        this.onChangeEmitter.emit(this.value);
        this.onInputChange(value);
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    InputComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onInputChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputComponent.prototype.onInputChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { };
    /**
     * @return {?}
     */
    InputComponent.prototype.onTouched = /**
     * @return {?}
     */
    function () { };
    InputComponent.defaultProps = {
        autocomplete: 'none',
        className: '',
        disabled: false,
        floatLabel: '',
        hasCounter: false,
        id: null,
        maxLength: 500,
        name: '',
        placeholder: '',
        required: false,
        type: INPUT_TYPE.TEXT,
        value: ''
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    providers: [{
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return InputComponent; }))
                        }],
                    selector: config.components.prefix + "-input }",
                    template: "<div\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-prefix'\">\n    <ng-content select=\"[materializePrefix]\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <input (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [type]=\"type\"\n      [value]=\"value\"\n    />\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-suffix'\">\n    <ng-content select=\"[materializeSuffix]\"></ng-content>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
                }] }
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return []; };
    InputComponent.propDecorators = {
        onFocusEmitter: [{ type: Output, args: ['onFocus',] }],
        onChangeEmitter: [{ type: Output, args: ['onChange',] }],
        onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
        autocomplete: [{ type: Input }],
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        floatLabel: [{ type: Input }],
        hasCounter: [{ type: Input }],
        id: [{ type: Input }],
        maxLength: [{ type: Input }],
        name: [{ type: Input }],
        placeholder: [{ type: Input }],
        required: [{ type: Input }],
        type: [{ type: Input }],
        value: [{ type: Input }]
    };
    return InputComponent;
}());
export { InputComponent };
if (false) {
    /** @type {?} */
    InputComponent.defaultProps;
    /** @type {?} */
    InputComponent.prototype.onFocusEmitter;
    /** @type {?} */
    InputComponent.prototype.onChangeEmitter;
    /** @type {?} */
    InputComponent.prototype.onBlurEmitter;
    /** @type {?} */
    InputComponent.prototype.autocomplete;
    /** @type {?} */
    InputComponent.prototype.className;
    /** @type {?} */
    InputComponent.prototype.disabled;
    /** @type {?} */
    InputComponent.prototype.floatLabel;
    /** @type {?} */
    InputComponent.prototype.hasCounter;
    /** @type {?} */
    InputComponent.prototype.id;
    /** @type {?} */
    InputComponent.prototype.maxLength;
    /** @type {?} */
    InputComponent.prototype.name;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /** @type {?} */
    InputComponent.prototype.required;
    /** @type {?} */
    InputComponent.prototype.type;
    /** @type {?} */
    InputComponent.prototype.value;
    /** @type {?} */
    InputComponent.prototype.prefix;
    /** @type {?} */
    InputComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,