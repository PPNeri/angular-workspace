/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { config } from '../../config';
import { Router } from '@angular/router';
import { supportedEvents } from '../../utils/get-supported-events.util';
import { TabComponent } from './tab/tab.component';
var TabGroupComponent = /** @class */ (function () {
    function TabGroupComponent(router, renderer) {
        this.router = router;
        this.renderer = renderer;
        this.className = TabGroupComponent.defaultProps.className;
        this.selectedIndex = TabGroupComponent.defaultProps.selectedIndex;
        this.transitionDuration = TabGroupComponent.defaultProps.transitionDuration;
        this.prefix = config.components.prefix;
        this.onTabSelectEmitter = new EventEmitter();
        this.supportedEvents = supportedEvents();
        this.update = this.update.bind(this);
        window.addEventListener(this.supportedEvents.resize, this.update);
    }
    /**
     * @return {?}
     */
    TabGroupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        setTimeout(this.update, 250);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TabGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.selectedIndex && !changes.selectedIndex.isFirstChange()) {
            this.moveIndicator(changes.selectedIndex.currentValue, true);
        }
    };
    /**
     * @return {?}
     */
    TabGroupComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.moveIndicator(this.selectedIndex, false);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    TabGroupComponent.prototype.selectTab = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var tabs = this.tabs.toArray();
        /** @type {?} */
        var selectedTab = tabs[index];
        if (!selectedTab.disabled) {
            this.selectedIndex = index;
            this.onTabSelectEmitter.emit(index);
            this.moveIndicator(this.selectedIndex, true);
            if (selectedTab.link) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.router.navigate([selectedTab.link]);
                }), this.transitionDuration);
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    TabGroupComponent.prototype.activateIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.tabs.forEach((/**
         * @param {?} tab
         * @param {?} i
         * @return {?}
         */
        function (tab, i) {
            tab.isActive = i === index;
        }));
    };
    /**
     * @param {?} index
     * @param {?} hasAnimation
     * @return {?}
     */
    TabGroupComponent.prototype.moveIndicator = /**
     * @param {?} index
     * @param {?} hasAnimation
     * @return {?}
     */
    function (index, hasAnimation) {
        this.activateIndex(index);
        /** @type {?} */
        var child = this.headerRef.nativeElement.children[index];
        /** @type {?} */
        var transitionDuration = hasAnimation
            ? this.transitionDuration + "ms"
            : null;
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'transitionDuration', transitionDuration);
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'width', child.offsetWidth + "px");
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'transform', "translateX(" + child.offsetLeft + "px)");
    };
    TabGroupComponent.defaultProps = {
        className: '',
        selectedIndex: 0,
        transitionDuration: 450
    };
    TabGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-tab-group }",
                    template: "<div [ngClass]=\"className\">\n  <ul [ngClass]=\"prefix + '-tab-group'\" #header>\n\n    <li (click)=\"selectTab(i)\"\n      *ngFor=\"let tab of tabs; let i = index\"\n\n      [ngClass]=\"prefix + '-tab-group-item'\"\n      [class.active]=\"i === selectedIndex\"\n      [class.disabled]=\"tab.disabled\"\n      [isRippleActive]=\"!tab.disabled\"\n\n      materializeRipple\n    >\n      {{ tab.title }}\n    </li>\n\n    <div [ngClass]=\"prefix + '-tab-group-indicator-container'\" #indicator>\n      <div [ngClass]=\"prefix + '-tab-group-indicator'\"></div>\n    </div>\n  </ul>\n  \n  <div>\n    <ng-content select=\"materialize-tab\"></ng-content>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    TabGroupComponent.ctorParameters = function () { return [
        { type: Router },
        { type: Renderer2 }
    ]; };
    TabGroupComponent.propDecorators = {
        tabs: [{ type: ContentChildren, args: [TabComponent,] }],
        indicatorRef: [{ type: ViewChild, args: ['indicator', { static: true },] }],
        headerRef: [{ type: ViewChild, args: ['header', { static: true },] }],
        onTabSelectEmitter: [{ type: Output, args: ['onSelectTab',] }],
        className: [{ type: Input }],
        selectedIndex: [{ type: Input }],
        transitionDuration: [{ type: Input }]
    };
    return TabGroupComponent;
}());
export { TabGroupComponent };
if (false) {
    /** @type {?} */
    TabGroupComponent.defaultProps;
    /** @type {?} */
    TabGroupComponent.prototype.tabs;
    /** @type {?} */
    TabGroupComponent.prototype.indicatorRef;
    /** @type {?} */
    TabGroupComponent.prototype.headerRef;
    /** @type {?} */
    TabGroupComponent.prototype.onTabSelectEmitter;
    /** @type {?} */
    TabGroupComponent.prototype.className;
    /** @type {?} */
    TabGroupComponent.prototype.selectedIndex;
    /** @type {?} */
    TabGroupComponent.prototype.transitionDuration;
    /** @type {?} */
    TabGroupComponent.prototype.prefix;
    /** @type {?} */
    TabGroupComponent.prototype.supportedEvents;
    /**
     * @type {?}
     * @private
     */
    TabGroupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TabGroupComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,