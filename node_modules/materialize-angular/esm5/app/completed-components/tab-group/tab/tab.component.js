/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, Input } from '@angular/core';
import { config } from '../../../config';
var TabComponent = /** @class */ (function () {
    function TabComponent() {
        this.className = TabComponent.defaultProps.className;
        this.disabled = TabComponent.defaultProps.disabled;
        this.link = TabComponent.defaultProps.link;
        this.title = TabComponent.defaultProps.title;
        this.isActive = false;
    }
    TabComponent.defaultProps = {
        className: '',
        disabled: false,
        link: '',
        title: ''
    };
    TabComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-tab }",
                    template: "<div [hidden]=\"!isActive\" [ngClass]=\"className\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    TabComponent.ctorParameters = function () { return []; };
    TabComponent.propDecorators = {
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        link: [{ type: Input }],
        title: [{ type: Input }]
    };
    return TabComponent;
}());
export { TabComponent };
if (false) {
    /** @type {?} */
    TabComponent.defaultProps;
    /** @type {?} */
    TabComponent.prototype.className;
    /** @type {?} */
    TabComponent.prototype.disabled;
    /** @type {?} */
    TabComponent.prototype.link;
    /** @type {?} */
    TabComponent.prototype.title;
    /** @type {?} */
    TabComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvdGFiLWdyb3VwL3RhYi90YWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3pDO0lBbUJFO1FBUFMsY0FBUyxHQUFXLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ3hELGFBQVEsR0FBWSxZQUFZLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUN2RCxTQUFJLEdBQVcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDOUMsVUFBSyxHQUFXLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBS3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFoQmUseUJBQVksR0FBYTtRQUN2QyxTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVEsRUFBRSxLQUFLO1FBQ2YsSUFBSSxFQUFFLEVBQUU7UUFDUixLQUFLLEVBQUUsRUFBRTtLQUNWLENBQUM7O2dCQVZILFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLFdBQVM7b0JBQy9DLHVHQUFtQztpQkFDcEM7Ozs7OzRCQVNFLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLO3dCQUNMLEtBQUs7O0lBT1IsbUJBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQWxCWSxZQUFZOzs7SUFDdkIsMEJBS0U7O0lBRUYsaUNBQWlFOztJQUNqRSxnQ0FBZ0U7O0lBQ2hFLDRCQUF1RDs7SUFDdkQsNkJBQXlEOztJQUV6RCxnQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgVGFiTW9kZWwgfSBmcm9tICcuL3RhYi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LXRhYiB9YCxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGFiQ29tcG9uZW50IGltcGxlbWVudHMgVGFiTW9kZWwge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBUYWJNb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBsaW5rOiAnJyxcbiAgICB0aXRsZTogJydcbiAgfTtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IFRhYkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IFRhYkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuZGlzYWJsZWQ7XG4gIEBJbnB1dCgpIGxpbms6IHN0cmluZyA9IFRhYkNvbXBvbmVudC5kZWZhdWx0UHJvcHMubGluaztcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZyA9IFRhYkNvbXBvbmVudC5kZWZhdWx0UHJvcHMudGl0bGU7XG5cbiAgcHVibGljIGlzQWN0aXZlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgfVxufVxuIl19