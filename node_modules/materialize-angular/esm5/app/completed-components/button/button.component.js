/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { BUTTON_LEVELS, BUTTON_TYPES } from './button.model';
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../config';
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent() {
        this.className = ButtonComponent.defaultProps.className;
        this.disabled = ButtonComponent.defaultProps.disabled;
        this.level = ButtonComponent.defaultProps.level;
        this.rippleDuration = ButtonComponent.defaultProps.rippleDuration;
        this.type = ButtonComponent.defaultProps.type;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = true;
        }
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = false;
            this.onClickEmitter.emit();
        }
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    };
    ButtonComponent.defaultProps = {
        className: '',
        disabled: false,
        level: BUTTON_LEVELS.ACCENT,
        rippleDuration: 250,
        type: BUTTON_TYPES.BUTTON
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-button }",
                    template: "<button [ngClass]=\"[prefix + '-button', level, className]\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (focus)=\"onFocus()\"\n\n  materializeRipple\n  [isRippleActive]=\"!disabled\"\n  [rippleDuration]=\"rippleDuration\"\n  \n  [class.focused]=\"isFocused\"\n  [disabled]=\"disabled\"\n  [type]=\"type\"\n  \n  #element>\n  <ng-content></ng-content>\n</button>\n"
                }] }
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return []; };
    ButtonComponent.propDecorators = {
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        level: [{ type: Input }],
        rippleDuration: [{ type: Input }],
        type: [{ type: Input }],
        onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
        onClickEmitter: [{ type: Output, args: ['onClick',] }],
        element: [{ type: ViewChild, args: ['element', { static: true },] }]
    };
    return ButtonComponent;
}());
export { ButtonComponent };
if (false) {
    /** @type {?} */
    ButtonComponent.defaultProps;
    /** @type {?} */
    ButtonComponent.prototype.className;
    /** @type {?} */
    ButtonComponent.prototype.disabled;
    /** @type {?} */
    ButtonComponent.prototype.level;
    /** @type {?} */
    ButtonComponent.prototype.rippleDuration;
    /** @type {?} */
    ButtonComponent.prototype.type;
    /** @type {?} */
    ButtonComponent.prototype.onBlurEmitter;
    /** @type {?} */
    ButtonComponent.prototype.onClickEmitter;
    /** @type {?} */
    ButtonComponent.prototype.element;
    /** @type {?} */
    ButtonComponent.prototype.prefix;
    /** @type {?} */
    ButtonComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBZSxNQUFNLGdCQUFnQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXRDO0lBMkJFO1FBZFMsY0FBUyxHQUFXLGVBQWUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQzNELGFBQVEsR0FBWSxlQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUMxRCxVQUFLLEdBQWtCLGVBQWUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBQzFELG1CQUFjLEdBQVcsZUFBZSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFDckUsU0FBSSxHQUFpQixlQUFlLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQU96RCxXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFJdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUMzQyxDQUFDOzs7O0lBRUQsaUNBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDOzs7O0lBRUQsaUNBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7Ozs7SUFFRCxnQ0FBTTs7O0lBQU47UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTFCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUE5Q2UsNEJBQVksR0FBZ0I7UUFDMUMsU0FBUyxFQUFFLEVBQUU7UUFDYixRQUFRLEVBQUUsS0FBSztRQUNmLEtBQUssRUFBRSxhQUFhLENBQUMsTUFBTTtRQUMzQixjQUFjLEVBQUUsR0FBRztRQUNuQixJQUFJLEVBQUUsWUFBWSxDQUFDLE1BQU07S0FDMUIsQ0FBQzs7Z0JBWEgsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sY0FBWTtvQkFDbEQsK1hBQXNDO2lCQUN2Qzs7Ozs7NEJBVUUsS0FBSzsyQkFDTCxLQUFLO3dCQUNMLEtBQUs7aUNBQ0wsS0FBSzt1QkFDTCxLQUFLO2dDQUVMLE1BQU0sU0FBQyxRQUFRO2lDQUNmLE1BQU0sU0FBQyxTQUFTOzBCQUVoQixTQUFTLFNBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7SUE4QnhDLHNCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FoRFksZUFBZTs7O0lBQzFCLDZCQU1FOztJQUVGLG9DQUFvRTs7SUFDcEUsbUNBQW1FOztJQUNuRSxnQ0FBbUU7O0lBQ25FLHlDQUE4RTs7SUFDOUUsK0JBQWdFOztJQUVoRSx3Q0FBb0Q7O0lBQ3BELHlDQUFzRDs7SUFFdEQsa0NBQTREOztJQUU1RCxpQ0FBeUM7O0lBQ3pDLG9DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEJVVFRPTl9MRVZFTFMsIEJVVFRPTl9UWVBFUywgQnV0dG9uTW9kZWwgfSBmcm9tICcuL2J1dHRvbi5tb2RlbCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1idXR0b24gfWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9idXR0b24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEJ1dHRvbk1vZGVsIHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogQnV0dG9uTW9kZWwgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgbGV2ZWw6IEJVVFRPTl9MRVZFTFMuQUNDRU5ULFxuICAgIHJpcHBsZUR1cmF0aW9uOiAyNTAsXG4gICAgdHlwZTogQlVUVE9OX1RZUEVTLkJVVFRPTlxuICB9O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gQnV0dG9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gQnV0dG9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5kaXNhYmxlZDtcbiAgQElucHV0KCkgbGV2ZWw6IEJVVFRPTl9MRVZFTFMgPSBCdXR0b25Db21wb25lbnQuZGVmYXVsdFByb3BzLmxldmVsO1xuICBASW5wdXQoKSByaXBwbGVEdXJhdGlvbjogbnVtYmVyID0gQnV0dG9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5yaXBwbGVEdXJhdGlvbjtcbiAgQElucHV0KCkgdHlwZTogQlVUVE9OX1RZUEVTID0gQnV0dG9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy50eXBlO1xuXG4gIEBPdXRwdXQoJ29uQmx1cicpIG9uQmx1ckVtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgQE91dHB1dCgnb25DbGljaycpIG9uQ2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD47XG5cbiAgQFZpZXdDaGlsZCgnZWxlbWVudCcsIHsgc3RhdGljOiB0cnVlIH0pIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcbiAgcHVibGljIGlzRm9jdXNlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5vbkJsdXJFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIHRoaXMub25DbGlja0VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkNsaWNrRW1pdHRlci5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIHRoaXMub25CbHVyRW1pdHRlci5lbWl0KCk7XG5cbiAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICB9XG59XG4iXX0=