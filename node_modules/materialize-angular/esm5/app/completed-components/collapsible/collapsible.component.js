/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { config } from '../../config';
var CollapsibleComponent = /** @class */ (function () {
    function CollapsibleComponent(renderer) {
        this.renderer = renderer;
        this.className = CollapsibleComponent.defaultProps.className;
        this.disabled = CollapsibleComponent.defaultProps.disabled;
        this.isOpen = CollapsibleComponent.defaultProps.isOpen;
        this.showIndicator = CollapsibleComponent.defaultProps.showIndicator;
        this.prefix = config.components.prefix;
        this.onCloseEmitter = new EventEmitter();
        this.onOpenEmitter = new EventEmitter();
        this.onToggle = this.onToggle.bind(this);
        this.update = this.update.bind(this);
        window.addEventListener('resize', this.update);
    }
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isOpen) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.update();
            }), 300);
        }
    };
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.update();
    };
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.onToggle = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            if (this.isOpen) {
                this.close();
                this.onCloseEmitter.emit();
            }
            else {
                this.open();
                this.onOpenEmitter.emit();
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.isOpen = true;
        this.update();
    };
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isOpen = false;
        this.update();
    };
    /**
     * @return {?}
     */
    CollapsibleComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var contentContainer = this.containerRef.nativeElement;
        /** @type {?} */
        var maxHeight = this.isOpen
            ? contentContainer.scrollHeight
            : 0;
        this.renderer.setStyle(contentContainer, 'maxHeight', maxHeight + "px");
    };
    CollapsibleComponent.defaultProps = {
        className: '',
        disabled: false,
        isOpen: false,
        showIndicator: true
    };
    CollapsibleComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-collapsible }",
                    template: "<div\n  [ngClass]=\"[prefix + '-collapsible', className]\"\n  [class.disabled]=\"disabled\"\n  [class.open]=\"isOpen\"\n>\n  <div (click)=\"onToggle()\"\n    [isRippleActive]=\"!disabled\"\n    [ngClass]=\"[prefix + '-collapsible-title', className]\"\n\n    materializeRipple\n  >\n    <ng-content select=\"materialize-collapsible-title\"></ng-content>\n\n    <materialize-icon *ngIf=\"showIndicator\" [className]=\"prefix + '-collapsible-title-icon'\">\n      expand_more\n    </materialize-icon>\n  </div>\n\n  <div [ngClass]=\"[prefix + '-collapsible-content-container', className]\" #container>\n    <div [ngClass]=\"prefix + '-collapsible-content'\">\n      <ng-content select=\"materialize-collapsible-content\"></ng-content>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    CollapsibleComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    CollapsibleComponent.propDecorators = {
        onCloseEmitter: [{ type: Output, args: ['onClose',] }],
        onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
        containerRef: [{ type: ViewChild, args: ['container', { static: true },] }],
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        isOpen: [{ type: Input }],
        showIndicator: [{ type: Input }]
    };
    return CollapsibleComponent;
}());
export { CollapsibleComponent };
if (false) {
    /** @type {?} */
    CollapsibleComponent.defaultProps;
    /** @type {?} */
    CollapsibleComponent.prototype.onCloseEmitter;
    /** @type {?} */
    CollapsibleComponent.prototype.onOpenEmitter;
    /** @type {?} */
    CollapsibleComponent.prototype.containerRef;
    /** @type {?} */
    CollapsibleComponent.prototype.className;
    /** @type {?} */
    CollapsibleComponent.prototype.disabled;
    /** @type {?} */
    CollapsibleComponent.prototype.isOpen;
    /** @type {?} */
    CollapsibleComponent.prototype.showIndicator;
    /** @type {?} */
    CollapsibleComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    CollapsibleComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0ZXJpYWxpemUtYW5ndWxhci8iLCJzb3VyY2VzIjpbImFwcC9jb21wbGV0ZWQtY29tcG9uZW50cy9jb2xsYXBzaWJsZS9jb2xsYXBzaWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFdEM7SUF3QkUsOEJBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFQOUIsY0FBUyxHQUFXLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDaEUsYUFBUSxHQUFZLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDL0QsV0FBTSxHQUFZLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDM0Qsa0JBQWEsR0FBWSxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO1FBRTNFLFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUd2QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDbEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRWpELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7O0lBRUQsaURBQWtCOzs7SUFBbEI7UUFBQSxpQkFNQztRQUxDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLFVBQVU7OztZQUFDO2dCQUNULEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQixDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7U0FDVDtJQUNILENBQUM7Ozs7SUFFRCwwQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM1QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELG1DQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsb0NBQUs7OztJQUFMO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUFFRCxxQ0FBTTs7O0lBQU47O1lBQ1EsZ0JBQWdCLEdBQWdCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYTs7WUFDL0QsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNO1lBQzNCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZO1lBQy9CLENBQUMsQ0FBQyxDQUFDO1FBRUwsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFNLFNBQVMsT0FBSyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQXRFZSxpQ0FBWSxHQUFxQjtRQUMvQyxTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVEsRUFBRSxLQUFLO1FBQ2YsTUFBTSxFQUFFLEtBQUs7UUFDYixhQUFhLEVBQUUsSUFBSTtLQUNwQixDQUFDOztnQkFWSCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxtQkFBaUI7b0JBQ3ZELHV3QkFBMkM7aUJBQzVDOzs7O2dCQVRDLFNBQVM7OztpQ0FrQlIsTUFBTSxTQUFDLFNBQVM7Z0NBQ2hCLE1BQU0sU0FBQyxRQUFROytCQUVmLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzRCQUV2QyxLQUFLOzJCQUNMLEtBQUs7eUJBQ0wsS0FBSztnQ0FDTCxLQUFLOztJQXdEUiwyQkFBQztDQUFBLEFBNUVELElBNEVDO1NBeEVZLG9CQUFvQjs7O0lBQy9CLGtDQUtFOztJQUVGLDhDQUF5RDs7SUFDekQsNkNBQXVEOztJQUV2RCw0Q0FBbUU7O0lBRW5FLHlDQUF5RTs7SUFDekUsd0NBQXdFOztJQUN4RSxzQ0FBb0U7O0lBQ3BFLDZDQUFrRjs7SUFFbEYsc0NBQXlDOzs7OztJQUU3Qix3Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbGxhcHNpYmxlTW9kZWwgfSBmcm9tICcuL2NvbGxhcHNpYmxlLm1vZGVsJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWNvbGxhcHNpYmxlIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vY29sbGFwc2libGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlQ29tcG9uZW50IGltcGxlbWVudHMgQ29sbGFwc2libGVNb2RlbCwgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzIHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogQ29sbGFwc2libGVNb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBpc09wZW46IGZhbHNlLFxuICAgIHNob3dJbmRpY2F0b3I6IHRydWVcbiAgfTtcblxuICBAT3V0cHV0KCdvbkNsb3NlJykgb25DbG9zZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgQE91dHB1dCgnb25PcGVuJykgb25PcGVuRW1pdHRlcjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIGNvbnRhaW5lclJlZjogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IENvbGxhcHNpYmxlQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gQ29sbGFwc2libGVDb21wb25lbnQuZGVmYXVsdFByb3BzLmRpc2FibGVkO1xuICBASW5wdXQoKSBpc09wZW46IGJvb2xlYW4gPSBDb2xsYXBzaWJsZUNvbXBvbmVudC5kZWZhdWx0UHJvcHMuaXNPcGVuO1xuICBASW5wdXQoKSBzaG93SW5kaWNhdG9yOiBib29sZWFuID0gQ29sbGFwc2libGVDb21wb25lbnQuZGVmYXVsdFByb3BzLnNob3dJbmRpY2F0b3I7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLm9uQ2xvc2VFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAgIHRoaXMub25PcGVuRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIHRoaXMub25Ub2dnbGUgPSB0aGlzLm9uVG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgfSwgMzAwKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgb25Ub2dnbGUoKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLm9uQ2xvc2VFbWl0dGVyLmVtaXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICB0aGlzLm9uT3BlbkVtaXR0ZXIuZW1pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgY29udGVudENvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSB0aGlzLmNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuaXNPcGVuXG4gICAgICA/IGNvbnRlbnRDb250YWluZXIuc2Nyb2xsSGVpZ2h0XG4gICAgICA6IDA7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGNvbnRlbnRDb250YWluZXIsICdtYXhIZWlnaHQnLCBgJHsgbWF4SGVpZ2h0IH1weGApO1xuICB9XG59XG4iXX0=