/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { CollapsibleComponent } from '../collapsible/collapsible.component';
import { config } from '../../config';
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.className = AccordionComponent.defaultProps.className;
        this.onToggleEmitter = new EventEmitter();
        this.activeIndex = AccordionComponent.defaultProps.activeIndex;
    }
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.collapsibles.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.onOpenEmitter.subscribe((/**
             * @return {?}
             */
            function () {
                _this.toggleCollapsibles(index);
            }));
        }));
    };
    /**
     * @param {?} currentIndex
     * @return {?}
     */
    AccordionComponent.prototype.toggleCollapsibles = /**
     * @param {?} currentIndex
     * @return {?}
     */
    function (currentIndex) {
        this.activeIndex = currentIndex;
        this.onToggleEmitter.emit(this.activeIndex);
        this.collapsibles.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (index === currentIndex) {
                item.open();
            }
            else {
                item.close();
            }
        }));
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.showNext = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nextIndex = this.activeIndex + 1;
        this.toggleCollapsibles(nextIndex);
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.showPrev = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var prevIndex = this.activeIndex - 1;
        this.toggleCollapsibles(prevIndex);
    };
    AccordionComponent.defaultProps = {
        activeIndex: 0,
        className: ''
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-accordion }",
                    template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-collapsible\"></ng-content>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return []; };
    AccordionComponent.propDecorators = {
        collapsibles: [{ type: ContentChildren, args: [CollapsibleComponent,] }],
        onToggleEmitter: [{ type: Output, args: ['onToggle',] }],
        className: [{ type: Input }]
    };
    return AccordionComponent;
}());
export { AccordionComponent };
if (false) {
    /** @type {?} */
    AccordionComponent.defaultProps;
    /** @type {?} */
    AccordionComponent.prototype.collapsibles;
    /** @type {?} */
    AccordionComponent.prototype.onToggleEmitter;
    /** @type {?} */
    AccordionComponent.prototype.className;
    /** @type {?} */
    AccordionComponent.prototype.activeIndex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBRUwsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV0QztJQWtCRTtRQUpTLGNBQVMsR0FBVyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBS3JFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUxQyxJQUFJLENBQUMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDakUsQ0FBQzs7OztJQUVELCtDQUFrQjs7O0lBQWxCO1FBQUEsaUJBTUM7UUFMQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSztZQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVM7OztZQUFDO2dCQUMzQixLQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsK0NBQWtCOzs7O0lBQWxCLFVBQW1CLFlBQW9CO1FBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDO1FBRWhDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSztZQUNwQyxJQUFJLEtBQUssS0FBSyxZQUFZLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNkO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSOztZQUNRLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUM7UUFFdEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxxQ0FBUTs7O0lBQVI7O1lBQ1EsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQztRQUV0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQW5EZSwrQkFBWSxHQUFtQjtRQUM3QyxXQUFXLEVBQUUsQ0FBQztRQUNkLFNBQVMsRUFBRSxFQUFFO0tBQ2QsQ0FBQzs7Z0JBUkgsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0saUJBQWU7b0JBQ3JELG1IQUF5QztpQkFDMUM7Ozs7OytCQU9FLGVBQWUsU0FBQyxvQkFBb0I7a0NBRXBDLE1BQU0sU0FBQyxVQUFVOzRCQUVqQixLQUFLOztJQTJDUix5QkFBQztDQUFBLEFBekRELElBeURDO1NBckRZLGtCQUFrQjs7O0lBQzdCLGdDQUdFOztJQUVGLDBDQUFxRjs7SUFFckYsNkNBQWlFOztJQUVqRSx1Q0FBdUU7O0lBRXZFLHlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjY29yZGlvbk1vZGVsIH0gZnJvbSAnLi9hY2NvcmRpb24ubW9kZWwnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS9jb2xsYXBzaWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0tYWNjb3JkaW9uIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3JkaW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQgaW1wbGVtZW50cyBBY2NvcmRpb25Nb2RlbCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IEFjY29yZGlvbk1vZGVsID0ge1xuICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICBAQ29udGVudENoaWxkcmVuKENvbGxhcHNpYmxlQ29tcG9uZW50KSBjb2xsYXBzaWJsZXM6IFF1ZXJ5TGlzdDxDb2xsYXBzaWJsZUNvbXBvbmVudD47XG5cbiAgQE91dHB1dCgnb25Ub2dnbGUnKSBvblRvZ2dsZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxudW1iZXIgfCBudWxsPjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IEFjY29yZGlvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuXG4gIHB1YmxpYyBhY3RpdmVJbmRleDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub25Ub2dnbGVFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IEFjY29yZGlvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuYWN0aXZlSW5kZXg7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5jb2xsYXBzaWJsZXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGl0ZW0ub25PcGVuRW1pdHRlci5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlcyhpbmRleCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHRvZ2dsZUNvbGxhcHNpYmxlcyhjdXJyZW50SW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuYWN0aXZlSW5kZXggPSBjdXJyZW50SW5kZXg7XG5cbiAgICB0aGlzLm9uVG9nZ2xlRW1pdHRlci5lbWl0KHRoaXMuYWN0aXZlSW5kZXgpO1xuXG4gICAgdGhpcy5jb2xsYXBzaWJsZXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgIGl0ZW0ub3BlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2hvd05leHQoKSB7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gdGhpcy5hY3RpdmVJbmRleCArIDE7XG5cbiAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlcyhuZXh0SW5kZXgpO1xuICB9XG5cbiAgc2hvd1ByZXYoKSB7XG4gICAgY29uc3QgcHJldkluZGV4ID0gdGhpcy5hY3RpdmVJbmRleCAtIDE7XG5cbiAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlcyhwcmV2SW5kZXgpO1xuICB9XG59XG4iXX0=