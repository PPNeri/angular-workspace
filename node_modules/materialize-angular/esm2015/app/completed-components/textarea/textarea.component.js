/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
export class TextAreaComponent {
    constructor() {
        this.className = TextAreaComponent.defaultProps.className;
        this.disabled = TextAreaComponent.defaultProps.disabled;
        this.floatLabel = TextAreaComponent.defaultProps.floatLabel;
        this.hasCounter = TextAreaComponent.defaultProps.hasCounter;
        this.id = TextAreaComponent.defaultProps.id;
        this.maxLength = TextAreaComponent.defaultProps.maxLength;
        this.minLength = TextAreaComponent.defaultProps.minLength;
        this.name = TextAreaComponent.defaultProps.name;
        this.placeholder = TextAreaComponent.defaultProps.placeholder;
        this.required = TextAreaComponent.defaultProps.required;
        this.rows = TextAreaComponent.defaultProps.rows;
        this.value = TextAreaComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onChangeEmitter = new EventEmitter();
        this.onFocusEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
            this.onFocusEmitter.emit();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        const { value } = event.target;
        this.value = value;
        this.onChangeEmitter.emit(event);
        this.onTextAreaChange(value);
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onTextAreaChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onTextAreaChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
TextAreaComponent.defaultProps = {
    className: '',
    disabled: false,
    floatLabel: '',
    hasCounter: false,
    id: null,
    maxLength: 500,
    minLength: 0,
    name: '',
    placeholder: '',
    required: false,
    rows: 1,
    value: ''
};
TextAreaComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TextAreaComponent))
                    }],
                selector: `${config.components.prefix}-textarea }`,
                template: "<div (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <textarea (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [minLength]=\"minLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n      [value]=\"value\">\n    </textarea>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
            }] }
];
/** @nocollapse */
TextAreaComponent.ctorParameters = () => [];
TextAreaComponent.propDecorators = {
    onFocusEmitter: [{ type: Output, args: ['onFocus',] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    hasCounter: [{ type: Input }],
    id: [{ type: Input }],
    maxLength: [{ type: Input }],
    minLength: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    rows: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextAreaComponent.defaultProps;
    /** @type {?} */
    TextAreaComponent.prototype.onFocusEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.onChangeEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.onBlurEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.className;
    /** @type {?} */
    TextAreaComponent.prototype.disabled;
    /** @type {?} */
    TextAreaComponent.prototype.floatLabel;
    /** @type {?} */
    TextAreaComponent.prototype.hasCounter;
    /** @type {?} */
    TextAreaComponent.prototype.id;
    /** @type {?} */
    TextAreaComponent.prototype.maxLength;
    /** @type {?} */
    TextAreaComponent.prototype.minLength;
    /** @type {?} */
    TextAreaComponent.prototype.name;
    /** @type {?} */
    TextAreaComponent.prototype.placeholder;
    /** @type {?} */
    TextAreaComponent.prototype.required;
    /** @type {?} */
    TextAreaComponent.prototype.rows;
    /** @type {?} */
    TextAreaComponent.prototype.value;
    /** @type {?} */
    TextAreaComponent.prototype.prefix;
    /** @type {?} */
    TextAreaComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,