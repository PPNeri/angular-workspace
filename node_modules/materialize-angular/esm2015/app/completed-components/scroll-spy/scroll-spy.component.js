/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { config } from '../../config';
import { getOffseTop } from '../../utils/get-offset-top.util';
import { ScrollSpyItemComponent } from './scroll-spy-item/scroll-spy-item.component';
import { windowScrollPosition } from '../../utils/window-scroll-position.util';
export class ScrollSpyComponent {
    constructor() {
        this.className = ScrollSpyComponent.defaultProps.className;
        this.itemId = ScrollSpyComponent.defaultProps.itemId;
        this.onChangeEmitter = new EventEmitter();
        this.onScroll = this.onScroll.bind(this);
        this.validateScroll = this.validateScroll.bind(this);
        window.addEventListener('scroll', this.onScroll);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.onScroll();
    }
    /**
     * @return {?}
     */
    onScroll() {
        setTimeout(this.validateScroll, 100);
    }
    /**
     * @return {?}
     */
    validateScroll() {
        /** @type {?} */
        const item = this.getCurrentItem();
        if (this.itemId !== item.id) {
            this.itemId = item.id;
            this.onChangeEmitter.emit(this.itemId);
        }
    }
    /**
     * @return {?}
     */
    getCurrentItem() {
        /** @type {?} */
        const items = this.items.toArray();
        for (let i = 0; i < items.length; i++) {
            /** @type {?} */
            const elementOffsetTop = getOffseTop(items[i].element.nativeElement);
            if (elementOffsetTop > windowScrollPosition()) {
                /** @type {?} */
                const prevItem = items[i - 1]
                    ? items[i - 1]
                    : items[0];
                return prevItem;
            }
        }
        return items[items.length - 1];
    }
}
ScrollSpyComponent.defaultProps = {
    className: '',
    itemId: ''
};
ScrollSpyComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-scroll-spy`,
                template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-scroll-spy-item\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ScrollSpyComponent.ctorParameters = () => [];
ScrollSpyComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [ScrollSpyItemComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    itemId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ScrollSpyComponent.defaultProps;
    /** @type {?} */
    ScrollSpyComponent.prototype.items;
    /** @type {?} */
    ScrollSpyComponent.prototype.onChangeEmitter;
    /** @type {?} */
    ScrollSpyComponent.prototype.className;
    /** @type {?} */
    ScrollSpyComponent.prototype.itemId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3Njcm9sbC1zcHkvc2Nyb2xsLXNweS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRXJGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBTS9FLE1BQU0sT0FBTyxrQkFBa0I7SUFhN0I7UUFIUyxjQUFTLEdBQVcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUM5RCxXQUFNLEdBQVcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUcvRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELGNBQWM7O2NBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFFbEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7Ozs7SUFFRCxjQUFjOztjQUNOLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUVsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7a0JBQy9CLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUVwRSxJQUFJLGdCQUFnQixHQUFHLG9CQUFvQixFQUFFLEVBQUU7O3NCQUN2QyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzNCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDZCxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFFWixPQUFPLFFBQVEsQ0FBQzthQUNqQjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDOztBQXREZSwrQkFBWSxHQUFtQjtJQUM3QyxTQUFTLEVBQUUsRUFBRTtJQUNiLE1BQU0sRUFBRSxFQUFFO0NBQ1gsQ0FBQzs7WUFSSCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLGFBQWE7Z0JBQ3BELHVIQUEwQzthQUMzQzs7Ozs7b0JBT0UsZUFBZSxTQUFDLHNCQUFzQjs4QkFFdEMsTUFBTSxTQUFDLFVBQVU7d0JBRWpCLEtBQUs7cUJBQ0wsS0FBSzs7OztJQVZOLGdDQUdFOztJQUVGLG1DQUFrRjs7SUFFbEYsNkNBQTBEOztJQUUxRCx1Q0FBdUU7O0lBQ3ZFLG9DQUFpRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGdldE9mZnNlVG9wIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LW9mZnNldC10b3AudXRpbCc7XG5pbXBvcnQgeyBTY3JvbGxTcHlJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9zY3JvbGwtc3B5LWl0ZW0vc2Nyb2xsLXNweS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTY3JvbGxTcHlNb2RlbCB9IGZyb20gJy4vc2Nyb2xsLXNweS5tb2RlbCc7XG5pbXBvcnQgeyB3aW5kb3dTY3JvbGxQb3NpdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3dpbmRvdy1zY3JvbGwtcG9zaXRpb24udXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LXNjcm9sbC1zcHlgLFxuICB0ZW1wbGF0ZVVybDogJy4vc2Nyb2xsLXNweS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5Q29tcG9uZW50IGltcGxlbWVudHMgU2Nyb2xsU3B5TW9kZWwsIEFmdGVyQ29udGVudEluaXQge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBTY3JvbGxTcHlNb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGl0ZW1JZDogJydcbiAgfTtcblxuICBAQ29udGVudENoaWxkcmVuKFNjcm9sbFNweUl0ZW1Db21wb25lbnQpIGl0ZW1zOiBRdWVyeUxpc3Q8U2Nyb2xsU3B5SXRlbUNvbXBvbmVudD47XG5cbiAgQE91dHB1dCgnb25DaGFuZ2UnKSBvbkNoYW5nZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gU2Nyb2xsU3B5Q29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGl0ZW1JZDogc3RyaW5nID0gU2Nyb2xsU3B5Q29tcG9uZW50LmRlZmF1bHRQcm9wcy5pdGVtSWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5vbkNoYW5nZUVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIHRoaXMub25TY3JvbGwgPSB0aGlzLm9uU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgdGhpcy52YWxpZGF0ZVNjcm9sbCA9IHRoaXMudmFsaWRhdGVTY3JvbGwuYmluZCh0aGlzKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLm9uU2Nyb2xsKCk7XG4gIH1cblxuICBvblNjcm9sbCgpIHtcbiAgICBzZXRUaW1lb3V0KHRoaXMudmFsaWRhdGVTY3JvbGwsIDEwMCk7XG4gIH1cblxuICB2YWxpZGF0ZVNjcm9sbCgpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRDdXJyZW50SXRlbSgpO1xuXG4gICAgaWYgKHRoaXMuaXRlbUlkICE9PSBpdGVtLmlkKSB7XG4gICAgICB0aGlzLml0ZW1JZCA9IGl0ZW0uaWQ7XG4gICAgICB0aGlzLm9uQ2hhbmdlRW1pdHRlci5lbWl0KHRoaXMuaXRlbUlkKTtcbiAgICB9XG4gIH1cblxuICBnZXRDdXJyZW50SXRlbSgpOiBTY3JvbGxTcHlJdGVtQ29tcG9uZW50IHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXMudG9BcnJheSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudE9mZnNldFRvcCA9IGdldE9mZnNlVG9wKGl0ZW1zW2ldLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIGlmIChlbGVtZW50T2Zmc2V0VG9wID4gd2luZG93U2Nyb2xsUG9zaXRpb24oKSkge1xuICAgICAgICBjb25zdCBwcmV2SXRlbSA9IGl0ZW1zW2kgLSAxXVxuICAgICAgICAgID8gaXRlbXNbaSAtIDFdXG4gICAgICAgICAgOiBpdGVtc1swXTtcblxuICAgICAgICByZXR1cm4gcHJldkl0ZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdO1xuICB9XG59XG4iXX0=