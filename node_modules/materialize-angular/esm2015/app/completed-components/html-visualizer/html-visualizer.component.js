/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { config } from '../../config';
export class HTMLVisualizerComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.className = HTMLVisualizerComponent.defaultProps.className;
        this.html = HTMLVisualizerComponent.defaultProps.html;
        this.prefix = config.components.prefix;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.htmlContent = this.render(this.html);
    }
    /**
     * @param {?} html
     * @return {?}
     */
    render(html) {
        /** @type {?} */
        const tags = this.splitByTags(html);
        /** @type {?} */
        const lines = [];
        /** @type {?} */
        let depth = 0;
        for (let i = 0; i < tags.length; i++) {
            /** @type {?} */
            const currentTag = tags[i];
            /** @type {?} */
            const nextTag = tags[i + 1];
            /** @type {?} */
            const lastTag = tags[i + 2];
            /** @type {?} */
            const result = this.createLineLogic(currentTag, nextTag, lastTag, depth, i);
            depth = result.depth;
            i = result.cycle;
            lines.push(result.line);
        }
        return lines.join('<br />');
    }
    /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    createNode(content, className) {
        /** @type {?} */
        let escapedContent = content.replace(/&/g, '&amp;');
        escapedContent = escapedContent.trim();
        escapedContent = escapedContent.replace(/\[\[/g, '&#123&#123;');
        escapedContent = escapedContent.replace(/\]\]/g, '&#125&#125;');
        escapedContent = escapedContent.replace(/</g, '&lt;');
        escapedContent = escapedContent.replace(/>/g, '&gt;');
        escapedContent = escapedContent.replace(/(\S+)="([^']*?)"/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => {
            /** @type {?} */
            const value = match.match(/"([^']*?)"/g);
            /** @type {?} */
            const attribute = match.match(/(\S+)=/g);
            /** @type {?} */
            const attributeValidated = (attribute && attribute[0]) || '';
            /** @type {?} */
            const valueValidated = (value && value[0]) || '';
            /** @type {?} */
            const attributeTag = `<span class="${HTMLVisualizerComponent.ATTRIBUTE_CLASS}">${attributeValidated}</span>`;
            /** @type {?} */
            const valueTag = `<span class="${HTMLVisualizerComponent.VALUE_CLASS}">${valueValidated}</span>`;
            return attributeTag + valueTag;
        }));
        escapedContent = escapedContent.replace(/(&lt;\/|&lt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => `<span class="${HTMLVisualizerComponent.SYMBOL_CLASS}">&lt;${match.includes('/') ? '/' : ''}</span>`));
        escapedContent = escapedContent.replace(/(\/&gt;|&gt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => `<span class="${HTMLVisualizerComponent.SYMBOL_CLASS}">${match.includes('/') ? '/' : ''}&gt;</span>`));
        return `<span class="${className}">${escapedContent}</span>`;
    }
    /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    indentNode(depth, content) {
        /** @type {?} */
        const indentationBase = '&emsp;&emsp;';
        /** @type {?} */
        const indentation = indentationBase.repeat(depth);
        return `${indentation}${content}`;
    }
    /**
     * @param {?} xml
     * @return {?}
     */
    splitByTags(xml) {
        /** @type {?} */
        const tags = xml.split(/(<\/?[^>]+>)/g);
        /** @type {?} */
        const cleanedTags = tags.filter((/**
         * @param {?} line
         * @return {?}
         */
        line => line.trim() !== ''));
        return cleanedTags;
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isTag(contentNode) {
        return (/<[^>!]+>/).test(contentNode);
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isOpeningTag(contentNode) {
        if (this.isTag(contentNode) && !this.isClosingTag(contentNode) && !this.isSelfClosingTag(contentNode)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isClosingTag(contentNode) {
        return (/<\/+[^>]+>/).test(contentNode);
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isSelfClosingTag(contentNode) {
        return (/<[^>]+\/>/).test(contentNode);
    }
    /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    createLineLogic(firstTag, middleTag, lastTag, depth, cycle) {
        if (this.isOpeningTag(firstTag) && this.isClosingTag(middleTag)) {
            /** @type {?} */
            const openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            const closeNode = this.createNode(middleTag, 'tag');
            return {
                cycle: cycle + 1,
                depth: depth,
                line: this.indentNode(depth, `${openNode}${closeNode}`)
            };
        }
        if (this.isOpeningTag(firstTag) && !this.isTag(middleTag)) {
            /** @type {?} */
            const openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            const contentNode = this.createNode(middleTag, 'string');
            /** @type {?} */
            const closeNode = this.createNode(lastTag, 'tag');
            return {
                cycle: cycle + 2,
                depth: depth,
                line: this.indentNode(depth, `${openNode}${contentNode}${closeNode}`)
            };
        }
        if (this.isSelfClosingTag(firstTag)) {
            /** @type {?} */
            const selfClosingNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth,
                line: this.indentNode(depth, selfClosingNode)
            };
        }
        if (this.isClosingTag(firstTag)) {
            /** @type {?} */
            const closeNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth - 1,
                line: this.indentNode(depth - 1, closeNode)
            };
        }
        return {
            cycle: cycle,
            depth: depth + 1,
            line: this.indentNode(depth, this.createNode(firstTag, 'text'))
        };
    }
}
HTMLVisualizerComponent.ATTRIBUTE_CLASS = `${config.components.prefix}-html-visualizer-attribute`;
HTMLVisualizerComponent.VALUE_CLASS = `${config.components.prefix}-html-visualizer-value`;
HTMLVisualizerComponent.SYMBOL_CLASS = `${config.components.prefix}-html-visualizer-symbol`;
HTMLVisualizerComponent.defaultProps = {
    className: '',
    html: ''
};
HTMLVisualizerComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-html-visualizer`,
                template: "<div [ngClass]=\"prefix + '-html-visualizer'\">\n  <div [ngClass]=\"prefix + '-html-visualizer-content'\" [innerHTML]=\"htmlContent\" ngNonBindable></div>\n</div>\n"
            }] }
];
/** @nocollapse */
HTMLVisualizerComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
HTMLVisualizerComponent.propDecorators = {
    className: [{ type: Input }],
    html: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HTMLVisualizerComponent.ATTRIBUTE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.VALUE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.SYMBOL_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.defaultProps;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.className;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.html;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.htmlContent;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    HTMLVisualizerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,