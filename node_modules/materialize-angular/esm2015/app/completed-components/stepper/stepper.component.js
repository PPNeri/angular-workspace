/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { config } from '../../config';
import { StepComponent } from './step/step.component';
export class StepperComponent {
    constructor() {
        this.className = StepperComponent.defaultProps.className;
        this.activeIndex = StepperComponent.defaultProps.activeIndex;
        this.showTicks = StepperComponent.defaultProps.showTicks;
        this.prefix = config.components.prefix;
        this.isContentReady = true;
        this.validateContent = this.validateContent.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.validateContent();
        this.steps.changes.subscribe(this.validateContent);
    }
    /**
     * @return {?}
     */
    validateContent() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isContentReady = false;
            this.validateSteps();
        }), 0);
    }
    /**
     * @return {?}
     */
    validateSteps() {
        this.steps.forEach((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        (step, index) => {
            step.isCompleted = (index < this.activeIndex && this.showTicks);
        }));
    }
}
StepperComponent.defaultProps = {
    activeIndex: 0,
    className: '',
    showTicks: true
};
StepperComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-stepper }`,
                template: "<div [ngClass]=\"[prefix + '-stepper', className]\">\n  <ng-container *ngFor=\"let step of steps; index as i\">\n    <div [ngClass]=\"prefix + '-step-divider'\" *ngIf=\"i > 0\" [class.completed]=\"i <= activeIndex\"></div>\n\n    <div\n      [ngClass]=\"prefix + '-step'\"\n      [class.active]=\"i === activeIndex\"\n      [class.completed]=\"i < activeIndex\"\n      *ngIf=\"!isContentReady\"\n    >\n      <ng-template [ngTemplateOutlet]=\"step.indicatorTemplate\"></ng-template>\n      <ng-template [ngTemplateOutlet]=\"step.labelTemplate\"></ng-template>\n    </div>\n  </ng-container>\n</div>\n"
            }] }
];
/** @nocollapse */
StepperComponent.ctorParameters = () => [];
StepperComponent.propDecorators = {
    className: [{ type: Input }],
    activeIndex: [{ type: Input }],
    showTicks: [{ type: Input }],
    steps: [{ type: ContentChildren, args: [StepComponent,] }]
};
if (false) {
    /** @type {?} */
    StepperComponent.defaultProps;
    /** @type {?} */
    StepperComponent.prototype.className;
    /** @type {?} */
    StepperComponent.prototype.activeIndex;
    /** @type {?} */
    StepperComponent.prototype.showTicks;
    /** @type {?} */
    StepperComponent.prototype.steps;
    /** @type {?} */
    StepperComponent.prototype.prefix;
    /** @type {?} */
    StepperComponent.prototype.isContentReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU90RCxNQUFNLE9BQU8sZ0JBQWdCO0lBZ0IzQjtRQVRTLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQzVELGdCQUFXLEdBQVcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUNoRSxjQUFTLEdBQVksZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUkvRCxXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFDbEMsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFHM0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7WUFDNUIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztBQXBDZSw2QkFBWSxHQUFpQjtJQUMzQyxXQUFXLEVBQUUsQ0FBQztJQUNkLFNBQVMsRUFBRSxFQUFFO0lBQ2IsU0FBUyxFQUFFLElBQUk7Q0FDaEIsQ0FBQzs7WUFUSCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLFlBQVk7Z0JBQ25ELG9tQkFBdUM7YUFDeEM7Ozs7O3dCQVFFLEtBQUs7MEJBQ0wsS0FBSzt3QkFDTCxLQUFLO29CQUVMLGVBQWUsU0FBQyxhQUFhOzs7O0lBVjlCLDhCQUlFOztJQUVGLHFDQUFxRTs7SUFDckUsdUNBQXlFOztJQUN6RSxxQ0FBc0U7O0lBRXRFLGlDQUFnRTs7SUFFaEUsa0NBQXlDOztJQUN6QywwQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IFN0ZXBDb21wb25lbnQgfSBmcm9tICcuL3N0ZXAvc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RlcHBlck1vZGVsIH0gZnJvbSAnLi9zdGVwcGVyLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0tc3RlcHBlciB9YCxcbiAgdGVtcGxhdGVVcmw6ICcuL3N0ZXBwZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFN0ZXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBTdGVwcGVyTW9kZWwsIEFmdGVyQ29udGVudEluaXQge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBTdGVwcGVyTW9kZWwgPSB7XG4gICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBzaG93VGlja3M6IHRydWVcbiAgfTtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IFN0ZXBwZXJDb21wb25lbnQuZGVmYXVsdFByb3BzLmNsYXNzTmFtZTtcbiAgQElucHV0KCkgYWN0aXZlSW5kZXg6IG51bWJlciA9IFN0ZXBwZXJDb21wb25lbnQuZGVmYXVsdFByb3BzLmFjdGl2ZUluZGV4O1xuICBASW5wdXQoKSBzaG93VGlja3M6IGJvb2xlYW4gPSBTdGVwcGVyQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5zaG93VGlja3M7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihTdGVwQ29tcG9uZW50KSBzdGVwczogUXVlcnlMaXN0PFN0ZXBDb21wb25lbnQ+O1xuXG4gIHB1YmxpYyBwcmVmaXggPSBjb25maWcuY29tcG9uZW50cy5wcmVmaXg7XG4gIHB1YmxpYyBpc0NvbnRlbnRSZWFkeSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWxpZGF0ZUNvbnRlbnQgPSB0aGlzLnZhbGlkYXRlQ29udGVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMudmFsaWRhdGVDb250ZW50KCk7XG5cbiAgICB0aGlzLnN0ZXBzLmNoYW5nZXMuc3Vic2NyaWJlKHRoaXMudmFsaWRhdGVDb250ZW50KTtcbiAgfVxuXG4gIHZhbGlkYXRlQ29udGVudCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaXNDb250ZW50UmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMudmFsaWRhdGVTdGVwcygpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgdmFsaWRhdGVTdGVwcygpIHtcbiAgICB0aGlzLnN0ZXBzLmZvckVhY2goKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICBzdGVwLmlzQ29tcGxldGVkID0gKGluZGV4IDwgdGhpcy5hY3RpdmVJbmRleCAmJiB0aGlzLnNob3dUaWNrcyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==