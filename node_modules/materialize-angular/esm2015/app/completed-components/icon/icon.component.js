/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ICON_SIZES } from './icon.model';
import { config } from '../../config';
export class IconComponent {
    constructor() {
        this.className = IconComponent.defaultProps.className;
        this.size = IconComponent.defaultProps.size;
        this.prefix = config.components.prefix;
        this.onClickEmitter = new EventEmitter();
        this.onBlurEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onClickEmitter.emit();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
    }
}
IconComponent.defaultProps = {
    className: '',
    size: ICON_SIZES.SM
};
IconComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-icon }`,
                template: "<span class=\"icon\" [ngClass]=\"[prefix + '-icon', size, className]\" (click)=\"onClick()\" (blur)=\"onBlur()\">\n  <ng-content></ng-content>\n</span>\n"
            }] }
];
/** @nocollapse */
IconComponent.ctorParameters = () => [];
IconComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    className: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IconComponent.defaultProps;
    /** @type {?} */
    IconComponent.prototype.onClickEmitter;
    /** @type {?} */
    IconComponent.prototype.onBlurEmitter;
    /** @type {?} */
    IconComponent.prototype.className;
    /** @type {?} */
    IconComponent.prototype.size;
    /** @type {?} */
    IconComponent.prototype.prefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2ljb24vaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxjQUFjLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU10QyxNQUFNLE9BQU8sYUFBYTtJQWN4QjtRQUxTLGNBQVMsR0FBVyxhQUFhLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUN6RCxTQUFJLEdBQWUsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFFckQsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBR3ZDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOztBQXhCZSwwQkFBWSxHQUFjO0lBQ3hDLFNBQVMsRUFBRSxFQUFFO0lBQ2IsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQ3BCLENBQUM7O1lBUkgsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxHQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTyxTQUFTO2dCQUNoRCxxS0FBb0M7YUFDckM7Ozs7OzZCQU9FLE1BQU0sU0FBQyxTQUFTOzRCQUNoQixNQUFNLFNBQUMsUUFBUTt3QkFFZixLQUFLO21CQUNMLEtBQUs7Ozs7SUFUTiwyQkFHRTs7SUFFRix1Q0FBc0Q7O0lBQ3RELHNDQUFvRDs7SUFFcEQsa0NBQWtFOztJQUNsRSw2QkFBNEQ7O0lBRTVELCtCQUF5QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ09OX1NJWkVTLCBJY29uTW9kZWwgfSBmcm9tICcuL2ljb24ubW9kZWwnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0taWNvbiB9YCxcbiAgdGVtcGxhdGVVcmw6ICcuL2ljb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEljb25Db21wb25lbnQgaW1wbGVtZW50cyBJY29uTW9kZWwge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBJY29uTW9kZWwgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBzaXplOiBJQ09OX1NJWkVTLlNNXG4gIH07XG5cbiAgQE91dHB1dCgnb25DbGljaycpIG9uQ2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gIEBPdXRwdXQoJ29uQmx1cicpIG9uQmx1ckVtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IEljb25Db21wb25lbnQuZGVmYXVsdFByb3BzLmNsYXNzTmFtZTtcbiAgQElucHV0KCkgc2l6ZTogSUNPTl9TSVpFUyA9IEljb25Db21wb25lbnQuZGVmYXVsdFByb3BzLnNpemU7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIHRoaXMub25CbHVyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5vbkNsaWNrRW1pdHRlci5lbWl0KCk7XG4gIH1cblxuICBvbkJsdXIoKSB7XG4gICAgdGhpcy5vbkJsdXJFbWl0dGVyLmVtaXQoKTtcbiAgfVxufVxuIl19