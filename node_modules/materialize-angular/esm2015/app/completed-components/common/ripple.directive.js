/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { config } from '../../config';
/**
 * @record
 */
function Coordinate() { }
if (false) {
    /** @type {?} */
    Coordinate.prototype.x;
    /** @type {?} */
    Coordinate.prototype.y;
}
export class RippleDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.rippleDuration = 500;
        this.isRippleActive = true;
        this.isRippleCenter = false;
        this.prefix = config.components.prefix;
        this.createRipple = this.createRipple.bind(this);
        this.element = this.elementRef.nativeElement;
        this.renderer.addClass(this.element, `${this.prefix}-ripple-element`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.isRippleActive) {
            this.renderer.addClass(this.element, 'disabled');
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    createRipple(event) {
        if (!this.isRippleActive) {
            return;
        }
        /** @type {?} */
        const coordinates = this.isRippleCenter
            ? this.getCoordinatesByCenter()
            : this.getCoordinatesByEvent(event);
        /** @type {?} */
        const radio = this.getRippleRadio(coordinates);
        this.renderRipple(radio, coordinates);
    }
    /**
     * @param {?} radio
     * @param {?} coordinate
     * @return {?}
     */
    renderRipple(radio, coordinate) {
        /** @type {?} */
        const ripple = this.renderer.createElement('div');
        /** @type {?} */
        const centerY = coordinate.y - radio;
        /** @type {?} */
        const centerX = coordinate.x - radio;
        this.renderer.addClass(ripple, 'ripple');
        this.renderer.setStyle(ripple, 'height', `${radio * 2}px`);
        this.renderer.setStyle(ripple, 'width', `${radio * 2}px`);
        this.renderer.setStyle(ripple, 'top', `${centerY}px`);
        this.renderer.setStyle(ripple, 'left', `${centerX}px`);
        this.renderer.insertBefore(this.element, ripple, this.element.firstChild);
        this.scaleRipple(ripple);
    }
    /**
     * @return {?}
     */
    getCoordinatesByCenter() {
        const { offsetHeight, offsetWidth } = this.element;
        /** @type {?} */
        const y = offsetHeight / 2;
        /** @type {?} */
        const x = offsetWidth / 2;
        return { x, y };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getCoordinatesByEvent(event) {
        /** @type {?} */
        const offset = this.getOffset(this.element);
        /** @type {?} */
        const y = event.pageY - offset.top;
        /** @type {?} */
        const x = event.pageX - offset.left;
        return { x, y };
    }
    /**
     * @param {?} coordinate
     * @return {?}
     */
    getRippleRadio(coordinate) {
        /** @type {?} */
        const height = Math.max(this.element.offsetHeight - coordinate.y, coordinate.y);
        /** @type {?} */
        const width = Math.max(this.element.offsetWidth - coordinate.x, coordinate.x);
        /** @type {?} */
        const radio = Math.hypot(height, width);
        return radio;
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    scaleRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            ripple.style.transitionDuration = `${this.rippleDuration}ms`;
            ripple.style.transform = 'scale(1)';
            this.hideRipple(ripple);
        }), 0);
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    hideRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(ripple, 'transitionDuration', `${this.rippleDuration}ms`);
            this.renderer.setStyle(ripple, 'opacity', '0');
            this.removeRipple(ripple);
        }), this.rippleDuration);
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    removeRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.removeChild(this.element, ripple);
        }), this.rippleDuration);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getOffset(element) {
        /** @type {?} */
        const rect = element.getBoundingClientRect();
        /** @type {?} */
        const top = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        /** @type {?} */
        const left = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        /** @type {?} */
        const offset = {
            left: rect.left + left,
            top: rect.top + top
        };
        return offset;
    }
}
RippleDirective.decorators = [
    { type: Directive, args: [{
                selector: `[${config.components.prefix}Ripple]`
            },] }
];
/** @nocollapse */
RippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
RippleDirective.propDecorators = {
    rippleDuration: [{ type: Input }],
    isRippleActive: [{ type: Input }],
    isRippleCenter: [{ type: Input }],
    createRipple: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    RippleDirective.prototype.rippleDuration;
    /** @type {?} */
    RippleDirective.prototype.isRippleActive;
    /** @type {?} */
    RippleDirective.prototype.isRippleCenter;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,