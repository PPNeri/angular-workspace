/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../config';
import { days } from '../../fixtures/calendar-week-days';
import { months } from '../../fixtures/calendar-months';
export class CalendarComponent {
    constructor() {
        this.className = CalendarComponent.defaultProps.className;
        this.date = CalendarComponent.defaultProps.date;
        this.displayOtherMonthDays = CalendarComponent.defaultProps.displayOtherMonthDays;
        this.prefix = config.components.prefix;
        this.selectYearAnimationDuration = 150;
        this.scrollToActiveYear = this.scrollToActiveYear.bind(this);
        this.onSelectDayEmitter = new EventEmitter();
        this.dayLabels = this.getDayLabels(days);
        this.monthLabels = this.getMonthLabels(months);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        /** @type {?} */
        const dateExists = (typeof this.date !== 'undefined' && this.date !== null);
        /** @type {?} */
        const openDate = dateExists ? this.date : new Date();
        /** @type {?} */
        const isToday = this.isTodayDate(openDate);
        /** @type {?} */
        const month = openDate.getMonth();
        /** @type {?} */
        const year = openDate.getFullYear();
        this.weeks = this.fillWeeks(month, year);
        this.years = this.fillYears(year);
        this.selectedDate = this.createDateModel(openDate, false, isToday, dateExists);
    }
    /**
     * @param {?} dayLabels
     * @return {?}
     */
    getDayLabels(dayLabels) {
        return [
            dayLabels.sunday,
            dayLabels.monday,
            dayLabels.tuesday,
            dayLabels.wednesday,
            dayLabels.thursday,
            dayLabels.friday,
            dayLabels.saturday
        ];
    }
    /**
     * @param {?} monthLabels
     * @return {?}
     */
    getMonthLabels(monthLabels) {
        return [
            monthLabels.january,
            monthLabels.february,
            monthLabels.march,
            monthLabels.april,
            monthLabels.may,
            monthLabels.june,
            monthLabels.july,
            monthLabels.august,
            monthLabels.september,
            monthLabels.october,
            monthLabels.november,
            monthLabels.december
        ];
    }
    /**
     * @param {?} date
     * @param {?} isOutOfMonth
     * @param {?} isToday
     * @param {?} showSelected
     * @return {?}
     */
    createDateModel(date, isOutOfMonth, isToday, showSelected) {
        /** @type {?} */
        const weekDay = date.getDay();
        /** @type {?} */
        const month = date.getMonth();
        /** @type {?} */
        const dateModel = {
            ISODate: this.generateISODate(date),
            date: date,
            dayLabel: this.dayLabels[weekDay],
            isOutOfMonth: isOutOfMonth,
            isToday: isToday,
            monthLabel: this.monthLabels[month],
            showSelected: showSelected
        };
        return dateModel;
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    createDateObject(day, month, year) {
        /** @type {?} */
        const date = new Date();
        date.setDate(day);
        date.setMonth(month);
        date.setFullYear(year);
        return date;
    }
    /**
     * @param {?} currentYear
     * @return {?}
     */
    fillYears(currentYear) {
        /** @type {?} */
        const firstYear = currentYear - 100;
        /** @type {?} */
        const lastYear = currentYear + 100;
        /** @type {?} */
        const years = [];
        for (let i = firstYear; i <= lastYear; i++) {
            years.push(i);
        }
        return years;
    }
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    fillWeeks(month, year) {
        this.selectedMonth = {
            label: this.monthLabels[month],
            number: month,
            year: year
        };
        /** @type {?} */
        const finalMonthDay = this.createDateObject(0, month, year);
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let initMonthDate = new Date(year, month, 1);
        /** @type {?} */
        let day = 0 - initMonthDate.getDay();
        /** @type {?} */
        let daysInWeek = [];
        while (initMonthDate.getDay() !== 0 || finalMonthDay >= initMonthDate) {
            ++day;
            initMonthDate = new Date(year, month, day);
            daysInWeek.push(this.createDayDate(initMonthDate, day, finalMonthDay));
            if (daysInWeek.length === 7) {
                weeks.push(daysInWeek);
                daysInWeek = [];
            }
        }
        return weeks;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isTodayDate(date) {
        /** @type {?} */
        const ISOCurrentDate = this.generateISODate(new Date());
        /** @type {?} */
        const ISODate = this.generateISODate(date);
        /** @type {?} */
        const isToday = (ISODate === ISOCurrentDate);
        return isToday;
    }
    /**
     * @param {?} date
     * @param {?} dayNumber
     * @param {?} finalMonthDay
     * @return {?}
     */
    createDayDate(date, dayNumber, finalMonthDay) {
        /** @type {?} */
        const isToday = this.isTodayDate(date);
        /** @type {?} */
        const isOutOfMonth = (dayNumber <= 0 || date > finalMonthDay);
        return this.createDateModel(date, isOutOfMonth, isToday, true);
    }
    /**
     * @return {?}
     */
    showPrevMonth() {
        /** @type {?} */
        const month = this.selectedMonth.number;
        /** @type {?} */
        const year = this.selectedMonth.year;
        /** @type {?} */
        const prevMonth = month >= 1
            ? month - 1
            : 11;
        /** @type {?} */
        const prevYear = month < 1
            ? year - 1
            : year;
        this.weeks = this.fillWeeks(prevMonth, prevYear);
    }
    /**
     * @return {?}
     */
    showNextMonth() {
        /** @type {?} */
        const month = this.selectedMonth.number;
        /** @type {?} */
        const year = this.selectedMonth.year;
        /** @type {?} */
        const nextMonth = month < 11
            ? month + 1
            : 0;
        /** @type {?} */
        const nextYear = month >= 11
            ? year + 1
            : year;
        this.weeks = this.fillWeeks(nextMonth, nextYear);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    generateISODate(date) {
        /** @type {?} */
        const day = date.getDate();
        /** @type {?} */
        const month = date.getMonth() + 1;
        /** @type {?} */
        const year = date.getFullYear();
        /** @type {?} */
        const dayString = day > 9
            ? day
            : `0${day}`;
        /** @type {?} */
        const monthString = month > 9
            ? month
            : `0${month}`;
        return `${year}-${monthString}-${dayString}`;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onSelectDay(date) {
        if (date.isOutOfMonth) {
            return;
        }
        this.selectedDate = date;
        this.onSelectDayEmitter.emit(this.selectedDate);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    onSelectYear(year) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const day = this.selectedDate.date.getDate();
            /** @type {?} */
            const month = this.selectedDate.date.getMonth();
            this.date = this.createDateObject(day, month, year);
            this.showYears = false;
            this.selectedDate = this.createDateModel(this.date, false, true, true);
            this.weeks = this.fillWeeks(month, year);
        }), this.selectYearAnimationDuration);
    }
    /**
     * @return {?}
     */
    displayYears() {
        this.showYears = true;
        setTimeout(this.scrollToActiveYear, 0);
    }
    /**
     * @return {?}
     */
    scrollToActiveYear() {
        const { nativeElement } = this.yearsContainerRef;
        /** @type {?} */
        const activeYear = nativeElement.querySelector('.selected');
        if (activeYear) {
            /** @type {?} */
            const top = this.getScrollCenter(nativeElement, activeYear);
            nativeElement.scrollTop = top;
        }
    }
    /**
     * @param {?} container
     * @param {?} internalElement
     * @return {?}
     */
    getScrollCenter(container, internalElement) {
        /** @type {?} */
        const yearTop = internalElement.offsetTop;
        /** @type {?} */
        const yearMiddleHeight = internalElement.offsetHeight / 2;
        /** @type {?} */
        const containerTop = container.offsetTop;
        /** @type {?} */
        const containerMiddleHeight = container.offsetHeight / 2;
        /** @type {?} */
        const elementRelativeTop = (yearTop - containerTop) - (containerMiddleHeight - yearMiddleHeight);
        if (elementRelativeTop < 0) {
            return 0;
        }
        return elementRelativeTop;
    }
}
CalendarComponent.defaultProps = {
    className: '',
    date: new Date(),
    displayOtherMonthDays: true
};
CalendarComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-calendar }`,
                template: "<div [ngClass]=\"[prefix + '-calendar', className]\">\n  <div [ngClass]=\"prefix + '-calendar-header'\">\n    <div [ngClass]=\"prefix + '-calendar-year'\">\n      <materialize-button (onClick)=\"displayYears()\">{{ selectedMonth.year }}</materialize-button>\n    </div>\n    <div [ngClass]=\"prefix + '-calendar-date'\">\n      <materialize-button (onClick)=\"showYears = false\">\n        {{ selectedDate.dayLabel.shortName }}, {{ selectedDate.monthLabel.shortName }} {{ selectedDate.date.getDate() }}\n      </materialize-button>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-calendar-body'\">\n    <ng-container *ngIf=\"!showYears\">\n      <div [ngClass]=\"prefix + '-calendar-controls'\">\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showPrevMonth()\">\n          <materialize-icon>chevron_left</materialize-icon>\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-month'\">\n          {{ selectedMonth.label.shortName }} {{ selectedMonth.year }}\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showNextMonth()\">\n          <materialize-icon>chevron_right</materialize-icon>\n        </div>\n      </div>\n      \n      <table [ngClass]=\"prefix + '-calendar-table'\">\n        <thead>\n          <tr>\n            <td [ngClass]=\"prefix + '-calendar-day-name'\" *ngFor=\"let day of dayLabels\">{{ day.shortestName }}</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let week of weeks\">\n            <td *ngFor=\"let day of week\">\n              <div [ngClass]=\"prefix + '-calendar-day'\"\n                (click)=\"onSelectDay(day)\"\n                *ngIf=\"!day.isOutOfMonth || displayOtherMonthDays\"\n  \n                [class.current]=\"day.isToday\"\n                [class.selected]=\"selectedDate.showSelected && selectedDate.ISODate === day.ISODate\"\n                [class.disabled]=\"day.isOutOfMonth\"\n  \n                materializeRipple\n                [rippleDuration]=\"800\"\n              >\n                {{ day.date.getDate() }}\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n    \n    <div [ngClass]=\"prefix + '-calendar-years'\"  #yearsContainer>\n      <ng-container *ngIf=\"showYears\">\n        <div [ngClass]=\"prefix + '-calendar-year-option'\"\n          *ngFor=\"let year of years\"\n\n          (click)=\"onSelectYear(year)\"\n          [class.selected]=\"year === selectedMonth.year\"\n\n          materializeRipple\n          [rippleDuration]=\"selectYearAnimationDuration\"\n        >\n          {{ year }}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
CalendarComponent.ctorParameters = () => [];
CalendarComponent.propDecorators = {
    yearsContainerRef: [{ type: ViewChild, args: ['yearsContainer', { static: false },] }],
    onSelectDayEmitter: [{ type: Output, args: ['onSelectDay',] }],
    className: [{ type: Input }],
    date: [{ type: Input }],
    displayOtherMonthDays: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CalendarComponent.defaultProps;
    /** @type {?} */
    CalendarComponent.prototype.yearsContainerRef;
    /** @type {?} */
    CalendarComponent.prototype.onSelectDayEmitter;
    /** @type {?} */
    CalendarComponent.prototype.className;
    /** @type {?} */
    CalendarComponent.prototype.date;
    /** @type {?} */
    CalendarComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    CalendarComponent.prototype.prefix;
    /** @type {?} */
    CalendarComponent.prototype.dayLabels;
    /** @type {?} */
    CalendarComponent.prototype.monthLabels;
    /** @type {?} */
    CalendarComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth;
    /** @type {?} */
    CalendarComponent.prototype.showYears;
    /** @type {?} */
    CalendarComponent.prototype.weeks;
    /** @type {?} */
    CalendarComponent.prototype.years;
    /** @type {?} */
    CalendarComponent.prototype.selectYearAnimationDuration;
}
//# sourceMappingURL=data:application/json;base64,