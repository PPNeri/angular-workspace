/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { config } from '../../../config';
export class GlossaryItemComponent {
    constructor() {
        this.className = GlossaryItemComponent.defaultProps.className;
        this.referenceId = GlossaryItemComponent.defaultProps.referenceId;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.onClickEmitter.emit(this.referenceId);
    }
}
GlossaryItemComponent.defaultProps = {
    className: '',
    referenceId: ''
};
GlossaryItemComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-glossary-item`,
                template: "<li\n  [ngClass]=\"[prefix + '-glossary-item', className]\"\n  [class.active]=\"isActive\"\n>\n  <ng-content></ng-content>\n</li>\n"
            }] }
];
/** @nocollapse */
GlossaryItemComponent.ctorParameters = () => [];
GlossaryItemComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    referenceId: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    GlossaryItemComponent.defaultProps;
    /** @type {?} */
    GlossaryItemComponent.prototype.onClickEmitter;
    /** @type {?} */
    GlossaryItemComponent.prototype.className;
    /** @type {?} */
    GlossaryItemComponent.prototype.referenceId;
    /** @type {?} */
    GlossaryItemComponent.prototype.prefix;
    /** @type {?} */
    GlossaryItemComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvc3NhcnktaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2dsb3NzYXJ5L2dsb3NzYXJ5LWl0ZW0vZ2xvc3NhcnktaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPekMsTUFBTSxPQUFPLHFCQUFxQjtJQWVoQztRQVBTLGNBQVMsR0FBVyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ2pFLGdCQUFXLEdBQVcscUJBQXFCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUV2RSxXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFLdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBR0QsT0FBTyxDQUFDLEtBQVU7UUFDaEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7O0FBdEJlLGtDQUFZLEdBQXNCO0lBQ2hELFNBQVMsRUFBRSxFQUFFO0lBQ2IsV0FBVyxFQUFFLEVBQUU7Q0FDaEIsQ0FBQzs7WUFSSCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLGdCQUFnQjtnQkFDdkQsK0lBQTZDO2FBQzlDOzs7Ozs2QkFPRSxNQUFNLFNBQUMsU0FBUzt3QkFFaEIsS0FBSzswQkFDTCxLQUFLO3NCQVdMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFuQmpDLG1DQUdFOztJQUVGLCtDQUF3RDs7SUFFeEQsMENBQTBFOztJQUMxRSw0Q0FBOEU7O0lBRTlFLHVDQUF5Qzs7SUFFekMseUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IEdsb3NzYXJ5SXRlbU1vZGVsIH0gZnJvbSAnLi9nbG9zc2FyeS1pdGVtLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0tZ2xvc3NhcnktaXRlbWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9nbG9zc2FyeS1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBHbG9zc2FyeUl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBHbG9zc2FyeUl0ZW1Nb2RlbCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IEdsb3NzYXJ5SXRlbU1vZGVsID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgcmVmZXJlbmNlSWQ6ICcnXG4gIH07XG5cbiAgQE91dHB1dCgnb25DbGljaycpIG9uQ2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IEdsb3NzYXJ5SXRlbUNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSByZWZlcmVuY2VJZDogc3RyaW5nID0gR2xvc3NhcnlJdGVtQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5yZWZlcmVuY2VJZDtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIHB1YmxpYyBpc0FjdGl2ZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vbkNsaWNrRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyLmVtaXQodGhpcy5yZWZlcmVuY2VJZCk7XG4gIH1cbn1cbiJdfQ==