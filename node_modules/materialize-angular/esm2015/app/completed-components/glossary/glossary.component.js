/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { config } from '../../config';
import { getOffseTop } from '../../utils/get-offset-top.util';
import { GlossaryItemComponent } from './glossary-item/glossary-item.component';
import { Router } from '@angular/router';
export class GlossaryComponent {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.className = GlossaryComponent.defaultProps.className;
        this.scrollSpy = GlossaryComponent.defaultProps.scrollSpy;
        this.topSpace = GlossaryComponent.defaultProps.topSpace;
        this.prefix = config.components.prefix;
        this.activeReferenceId = '';
        this.onClickItem = this.onClickItem.bind(this);
        this.registerOptions = this.registerOptions.bind(this);
        this.update = this.update.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.registerOptions();
        setTimeout(this.update, 30);
        if (this.scrollSpy) {
            this.scrollSpy.onChangeEmitter.subscribe((/**
             * @param {?} referenceId
             * @return {?}
             */
            (referenceId) => {
                this.activeReferenceId = referenceId;
                this.activeItemByReferenceId(referenceId);
            }));
        }
    }
    /**
     * @return {?}
     */
    update() {
        this.activeReferenceId = this.getActiveReferenceId();
        this.activeItemByReferenceId(this.activeReferenceId);
        this.scrollTo(this.activeReferenceId);
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    scrollTo(referenceId) {
        /** @type {?} */
        const element = document.getElementById(referenceId);
        if (element) {
            /** @type {?} */
            const elementOffsetTop = getOffseTop(element);
            /** @type {?} */
            const scrollTop = elementOffsetTop - this.topSpace;
            setTimeout((/**
             * @return {?}
             */
            () => window.scrollTo(0, scrollTop)), 150);
        }
    }
    /**
     * @return {?}
     */
    getActiveReferenceId() {
        /** @type {?} */
        const routerTree = this.router.parseUrl(this.router.url);
        if (routerTree && routerTree.fragment) {
            return routerTree.fragment;
        }
        return '';
    }
    /**
     * @return {?}
     */
    registerOptions() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.onClickEmitter.subscribe(this.onClickItem);
        }));
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    onClickItem(referenceId) {
        this.activeReferenceId = referenceId;
        this.activeItemByReferenceId(referenceId);
        this.scrollTo(referenceId);
        /** @type {?} */
        const routerTree = this.router.parseUrl(this.router.url);
        const { primary } = routerTree.root.children;
        /** @type {?} */
        const urlWithoutParams = primary
            ? primary.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            segment => segment.path))
            : routerTree.root.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            segment => segment.path));
        this.router.navigate(urlWithoutParams, { fragment: referenceId });
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    activeItemByReferenceId(referenceId) {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.isActive = item.referenceId === referenceId;
        }));
    }
}
GlossaryComponent.defaultProps = {
    className: '',
    scrollSpy: null,
    topSpace: 0
};
GlossaryComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-glossary`,
                template: "<ul [ngClass]=\"className\">\n  <ng-content></ng-content>\n</ul>\n"
            }] }
];
/** @nocollapse */
GlossaryComponent.ctorParameters = () => [
    { type: Router }
];
GlossaryComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [GlossaryItemComponent,] }],
    className: [{ type: Input }],
    scrollSpy: [{ type: Input }],
    topSpace: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GlossaryComponent.defaultProps;
    /** @type {?} */
    GlossaryComponent.prototype.items;
    /** @type {?} */
    GlossaryComponent.prototype.className;
    /** @type {?} */
    GlossaryComponent.prototype.scrollSpy;
    /** @type {?} */
    GlossaryComponent.prototype.topSpace;
    /** @type {?} */
    GlossaryComponent.prototype.prefix;
    /** @type {?} */
    GlossaryComponent.prototype.activeReferenceId;
    /**
     * @type {?}
     * @private
     */
    GlossaryComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,