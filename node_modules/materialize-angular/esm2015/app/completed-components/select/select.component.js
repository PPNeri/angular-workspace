/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
import { SelectOptionComponent } from './select-option/select-option.component';
export class SelectComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = SelectComponent.defaultProps.className;
        this.disabled = SelectComponent.defaultProps.disabled;
        this.floatLabel = SelectComponent.defaultProps.floatLabel;
        this.id = SelectComponent.defaultProps.id;
        this.isNativeControl = SelectComponent.defaultProps.isNativeControl;
        this.name = SelectComponent.defaultProps.name;
        this.required = SelectComponent.defaultProps.required;
        this.value = SelectComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.isOpen = false;
        this.onChangeEmitter = new EventEmitter();
        this.addBackdropListener = this.addBackdropListener.bind(this);
        this.onChangeOption = this.onChangeOption.bind(this);
        this.registerOptions = this.registerOptions.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(this.registerOptions, 0);
        this.options.changes.subscribe((/**
         * @param {?} changes
         * @return {?}
         */
        changes => {
            setTimeout(this.registerOptions, 0);
        }));
    }
    /**
     * @return {?}
     */
    registerOptions() {
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            option.isActive = (option.value === this.value);
            option.onClickEmitter.subscribe(this.onChangeOption);
        }));
        this.updateControl(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateControl(value) {
        this.value = value;
        this.isOpen = false;
        this.activeSelectedOption(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChangeOption(value) {
        this.updateControl(value);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    activeSelectedOption(value) {
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            if (option.value === value) {
                option.isActive = true;
                this.cloneOption(option);
            }
            else {
                option.isActive = false;
            }
        }));
    }
    /**
     * @param {?} selectedOption
     * @return {?}
     */
    cloneOption(selectedOption) {
        if (!this.labelContainerRef) {
            return;
        }
        const { nativeElement: labelContainer } = this.labelContainerRef;
        const { optionTemplateRef } = selectedOption;
        if (labelContainer.firstChild) {
            this.renderer.removeChild(labelContainer, labelContainer.firstChild);
        }
        if (optionTemplateRef) {
            const { firstChild } = optionTemplateRef.nativeElement;
            /** @type {?} */
            const cloned = firstChild.cloneNode(true);
            this.renderer.appendChild(labelContainer, cloned);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeNativeOption(event) {
        const { selectedOptions } = event.target;
        const { value } = selectedOptions[0];
        this.value = value;
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isFocused = true;
            this.isOpen = true;
            if (!this.isNativeControl) {
                setTimeout(this.addBackdropListener, 0);
            }
        }
    }
    /**
     * @return {?}
     */
    addBackdropListener() {
        this.backdropRef.nativeElement.addEventListener('click', (/**
         * @return {?}
         */
        () => {
            this.isOpen = false;
        }));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.updateControl(this.value);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
SelectComponent.defaultProps = {
    className: '',
    disabled: false,
    floatLabel: '',
    id: null,
    isNativeControl: false,
    name: '',
    required: false,
    value: null
};
SelectComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SelectComponent))
                    }],
                selector: `${config.components.prefix}-select }`,
                template: "<div [ngClass]=\"[className, prefix + '-form-control-select-container']\" *ngIf=\"isNativeControl\">\n  <div [ngClass]=\"prefix + '-form-control-container'\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n      <select (blur)=\"onBlur()\" (click)=\"onClick()\" (focus)=\"onFocus()\" (input)=\"onChangeNativeOption($event)\"\n        [ngClass]=\"prefix + '-form-control'\"\n        [attr.id]=\"id\"\n        [disabled]=\"disabled\"\n        [name]=\"name\"\n        [required]=\"required\"\n        [value]=\"value\"\n      >\n        <option\n          [selected]=\"option.value === value\"\n          [value]=\"option.value\"\n          *ngFor=\"let option of options\">\n          {{ option.content }}\n        </option>\n      </select>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n</div>\n\n\n<div (focus)=\"onFocus()\" (blur)=\"onBlur()\" *ngIf=\"!isNativeControl\"\n  [ngClass]=\"[className, prefix + '-form-control-select-container']\"\n  [class.open]=\"isOpen\"\n  [tabindex]=\"disabled ? '-1' : '0'\"\n>\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-form-control-select-backdrop'\"></div>\n\n  <div (click)=\"onClick()\"\n    [ngClass]=\"[prefix + '-form-control-container' , className]\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n      <div [ngClass]=\"prefix + '-form-control'\" #labelContainer>&nbsp;</div>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n\n  <div [className]=\"prefix + '-form-control-select-menu'\">\n    <ng-content select=\"materialize-select-option\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
SelectComponent.ctorParameters = () => [
    { type: Renderer2 }
];
SelectComponent.propDecorators = {
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
    labelContainerRef: [{ type: ViewChild, args: ['labelContainer', { static: false },] }],
    options: [{ type: ContentChildren, args: [SelectOptionComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    id: [{ type: Input }],
    isNativeControl: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SelectComponent.defaultProps;
    /** @type {?} */
    SelectComponent.prototype.backdropRef;
    /** @type {?} */
    SelectComponent.prototype.labelContainerRef;
    /** @type {?} */
    SelectComponent.prototype.options;
    /** @type {?} */
    SelectComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SelectComponent.prototype.className;
    /** @type {?} */
    SelectComponent.prototype.disabled;
    /** @type {?} */
    SelectComponent.prototype.floatLabel;
    /** @type {?} */
    SelectComponent.prototype.id;
    /** @type {?} */
    SelectComponent.prototype.isNativeControl;
    /** @type {?} */
    SelectComponent.prototype.name;
    /** @type {?} */
    SelectComponent.prototype.required;
    /** @type {?} */
    SelectComponent.prototype.value;
    /** @type {?} */
    SelectComponent.prototype.prefix;
    /** @type {?} */
    SelectComponent.prototype.isFocused;
    /** @type {?} */
    SelectComponent.prototype.isOpen;
    /** @type {?} */
    SelectComponent.prototype.valueLabel;
    /**
     * @type {?}
     * @private
     */
    SelectComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,