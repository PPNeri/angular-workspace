/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { supportedEvents, supportTouchEvents } from '../../utils/get-supported-events.util';
import { config } from '../../config';
import { SliderOptionComponent } from './slider-option/slider-option.component';
export class SliderComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = SliderComponent.defaultProps.className;
        this.disabled = SliderComponent.defaultProps.disabled;
        this.required = SliderComponent.defaultProps.required;
        this.showLabels = SliderComponent.defaultProps.showLabels;
        this.showTicks = SliderComponent.defaultProps.showTicks;
        this.value = SliderComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.supportedEvents = supportedEvents();
        this.onChangeEmitter = new EventEmitter();
        this.actionDown = this.actionDown.bind(this);
        this.actionMove = this.actionMove.bind(this);
        this.actionUp = this.actionUp.bind(this);
        this.update = this.update.bind(this);
        window.addEventListener(this.supportedEvents.resize, this.update);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.sliderTrack.nativeElement.addEventListener(this.supportedEvents.down, this.actionDown);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.update();
        this.options.changes.subscribe(this.update);
    }
    /**
     * @return {?}
     */
    update() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderPositions();
            this.moveToValue(this.value, false);
        }), 0);
    }
    /**
     * @return {?}
     */
    renderPositions() {
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        this.removeTicks();
        this.options.forEach((/**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        (option, index) => {
            /** @type {?} */
            const leftSpace = pixelInterval * index;
            const { nativeElement } = option.templateRef;
            this.renderer.setStyle(nativeElement, 'left', `${leftSpace}px`);
            if (this.showTicks) {
                /** @type {?} */
                const tick = this.renderer.createElement('div');
                this.renderer.setStyle(tick, 'left', `${leftSpace}px`);
                this.renderer.addClass(tick, SliderComponent.tickClassName);
                this.renderer.appendChild(this.sliderTrackInterval.nativeElement, tick);
            }
        }));
    }
    /**
     * @return {?}
     */
    removeTicks() {
        const { nativeElement } = this.sliderTrackInterval;
        while (nativeElement.firstChild) {
            this.renderer.removeChild(nativeElement, nativeElement.firstChild);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionDown(event) {
        if (!this.disabled) {
            /** @type {?} */
            const x = this.getXCoordinate(event, this.supportedEvents.down);
            this.animate(x, true);
            window.addEventListener(this.supportedEvents.up, this.actionUp);
            window.addEventListener(this.supportedEvents.move, this.actionMove);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionMove(event) {
        /** @type {?} */
        const x = this.getXCoordinate(event, this.supportedEvents.move);
        this.value = this.getValueFromXCoordinate(x);
        this.animate(x, false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionUp(event) {
        window.removeEventListener(this.supportedEvents.up, this.actionUp);
        window.removeEventListener(this.supportedEvents.move, this.actionMove);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', null);
        /** @type {?} */
        const x = this.getXCoordinate(event, this.supportedEvents.up);
        this.value = this.getValueFromXCoordinate(x);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
        this.moveToValue(this.value, true);
    }
    /**
     * @param {?} value
     * @param {?} hasAnimation
     * @return {?}
     */
    moveToValue(value, hasAnimation) {
        /** @type {?} */
        const options = this.options.toArray();
        /** @type {?} */
        const index = options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value === value));
        /** @type {?} */
        const validatedIndex = index >= 0
            ? index
            : 0;
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        /** @type {?} */
        const nextXCoordinate = validatedIndex * pixelInterval;
        this.animate(nextXCoordinate, hasAnimation);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    activeOption(value) {
        this.options.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.isActive = (item.value === value);
        }));
    }
    /**
     * @param {?} x
     * @return {?}
     */
    getValueFromXCoordinate(x) {
        /** @type {?} */
        const index = this.getIndexFromXCoordinate(x);
        /** @type {?} */
        const options = this.options.toArray();
        /** @type {?} */
        const value = options[index].value;
        return value;
    }
    /**
     * @param {?} x
     * @return {?}
     */
    getIndexFromXCoordinate(x) {
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        if (pixelInterval) {
            /** @type {?} */
            const index = Math.round(x / pixelInterval);
            if (index >= 0 && index <= this.options.length) {
                return index;
            }
        }
        return 0;
    }
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    getXCoordinateByEventType(event, eventType) {
        if (supportTouchEvents()) {
            if (eventType === this.supportedEvents.up) {
                return event.changedTouches[0].clientX;
            }
            return event.touches[0].clientX;
        }
        return event.clientX;
    }
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    getXCoordinate(event, eventType) {
        /** @type {?} */
        const rect = this.sliderTrack.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const xCoordinateEvent = this.getXCoordinateByEventType(event, eventType);
        /** @type {?} */
        const x = xCoordinateEvent - rect.left;
        if (x < 0) {
            return 0;
        }
        if (x > this.sliderTrack.nativeElement.offsetWidth) {
            return this.sliderTrack.nativeElement.offsetWidth;
        }
        return x;
    }
    /**
     * @return {?}
     */
    getPixelInterval() {
        /** @type {?} */
        const maxOptionsSize = this.options.length - 1;
        if (maxOptionsSize > 0) {
            return this.sliderTrack.nativeElement.offsetWidth / maxOptionsSize;
        }
        return 0;
    }
    /**
     * @param {?} x
     * @param {?} hasAnimation
     * @return {?}
     */
    animate(x, hasAnimation) {
        this.activeOption(this.value);
        /** @type {?} */
        const transitionDuration = hasAnimation
            ? null
            : '0ms';
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', transitionDuration);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'left', `${x}px`);
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.value = value;
            this.moveToValue(value, false);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
SliderComponent.tickClassName = config.components.prefix + '-slider-step';
SliderComponent.defaultProps = {
    className: '',
    disabled: false,
    required: false,
    showLabels: true,
    showTicks: false,
    value: null
};
SliderComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SliderComponent))
                    }],
                selector: `${config.components.prefix}-slider }`,
                template: "<div [ngClass]=\"[prefix + '-slider', className]\" [class.focused]=\"isFocused\" [class.disabled]=\"disabled\">\n\n  <div [ngClass]=\"prefix + '-slider-track-container'\" #sliderTrack [tabindex]=\"disabled ? '-1' : '0'\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n    <div #sliderTrackInterval></div>\n\n    <div [ngClass]=\"prefix + '-slider-track'\" #sliderTrackBackground></div>\n\n    <div [ngClass]=\"prefix + '-slider-indicator-container'\" #sliderIndicatorContainer>\n      <ng-content select=\"materialize-slider-indicator\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-slider-labels-container'\" *ngIf=\"showLabels\">\n    <ng-content select=\"materialize-slider-option\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [
    { type: Renderer2 }
];
SliderComponent.propDecorators = {
    options: [{ type: ContentChildren, args: [SliderOptionComponent,] }],
    Slider: [{ type: ViewChild, args: ['Slider', { static: true },] }],
    sliderIndicatorContainer: [{ type: ViewChild, args: ['sliderIndicatorContainer', { static: true },] }],
    sliderTrack: [{ type: ViewChild, args: ['sliderTrack', { static: true },] }],
    sliderTrackBackground: [{ type: ViewChild, args: ['sliderTrackBackground', { static: true },] }],
    sliderTrackInterval: [{ type: ViewChild, args: ['sliderTrackInterval', { static: true },] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    showLabels: [{ type: Input }],
    showTicks: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderComponent.tickClassName;
    /** @type {?} */
    SliderComponent.defaultProps;
    /** @type {?} */
    SliderComponent.prototype.options;
    /** @type {?} */
    SliderComponent.prototype.Slider;
    /** @type {?} */
    SliderComponent.prototype.sliderIndicatorContainer;
    /** @type {?} */
    SliderComponent.prototype.sliderTrack;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackBackground;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackInterval;
    /** @type {?} */
    SliderComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SliderComponent.prototype.className;
    /** @type {?} */
    SliderComponent.prototype.disabled;
    /** @type {?} */
    SliderComponent.prototype.required;
    /** @type {?} */
    SliderComponent.prototype.showLabels;
    /** @type {?} */
    SliderComponent.prototype.showTicks;
    /** @type {?} */
    SliderComponent.prototype.value;
    /** @type {?} */
    SliderComponent.prototype.prefix;
    /** @type {?} */
    SliderComponent.prototype.isFocused;
    /** @type {?} */
    SliderComponent.prototype.supportedEvents;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,