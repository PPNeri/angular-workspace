/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { config } from '../../../config';
export class SliderOptionComponent {
    constructor() {
        this.className = SliderOptionComponent.defaultProps.className;
        this.value = SliderOptionComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isActive = false;
    }
}
SliderOptionComponent.defaultProps = {
    className: '',
    value: null
};
SliderOptionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-slider-option }`,
                template: "<div [ngClass]=\"[prefix + '-slider-option-container', className]\"\n  [class.active]=\"isActive\"\n\n  #template>\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
SliderOptionComponent.ctorParameters = () => [];
SliderOptionComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['template', { static: true },] }],
    className: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderOptionComponent.defaultProps;
    /** @type {?} */
    SliderOptionComponent.prototype.templateRef;
    /** @type {?} */
    SliderOptionComponent.prototype.className;
    /** @type {?} */
    SliderOptionComponent.prototype.value;
    /** @type {?} */
    SliderOptionComponent.prototype.prefix;
    /** @type {?} */
    SliderOptionComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3NsaWRlci9zbGlkZXItb3B0aW9uL3NsaWRlci1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPekMsTUFBTSxPQUFPLHFCQUFxQjtJQWNoQztRQU5TLGNBQVMsR0FBVyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ2pFLFVBQUssR0FBcUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztRQUVyRixXQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFJdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7QUFmZSxrQ0FBWSxHQUFzQjtJQUNoRCxTQUFTLEVBQUUsRUFBRTtJQUNiLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQzs7WUFSSCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLGtCQUFrQjtnQkFDekQscUtBQTZDO2FBQzlDOzs7OzswQkFPRSxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTt3QkFFdEMsS0FBSztvQkFDTCxLQUFLOzs7O0lBUk4sbUNBR0U7O0lBRUYsNENBQWlFOztJQUVqRSwwQ0FBMEU7O0lBQzFFLHNDQUE0Rjs7SUFFNUYsdUNBQXlDOztJQUN6Qyx5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBTbGlkZXJPcHRpb25Nb2RlbCB9IGZyb20gJy4vc2xpZGVyLW9wdGlvbi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LXNsaWRlci1vcHRpb24gfWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9zbGlkZXItb3B0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTbGlkZXJPcHRpb25Db21wb25lbnQgaW1wbGVtZW50cyBTbGlkZXJPcHRpb25Nb2RlbCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IFNsaWRlck9wdGlvbk1vZGVsID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgdmFsdWU6IG51bGxcbiAgfTtcblxuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZScsIHsgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlUmVmOiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gU2xpZGVyT3B0aW9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCBib29sZWFuIHwgbnVsbCA9IFNsaWRlck9wdGlvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMudmFsdWU7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcbiAgcHVibGljIGlzQWN0aXZlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgfVxufVxuIl19