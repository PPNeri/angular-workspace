/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
import { INPUT_TYPE } from '../input/input.model';
export class DatePickerComponent {
    constructor() {
        this.className = DatePickerComponent.defaultProps.className;
        this.disabled = DatePickerComponent.defaultProps.disabled;
        this.displayOtherMonthDays = DatePickerComponent.defaultProps.displayOtherMonthDays;
        this.floatLabel = DatePickerComponent.defaultProps.floatLabel;
        this.format = DatePickerComponent.defaultProps.format;
        this.fullSize = DatePickerComponent.defaultProps.fullSize;
        this.id = DatePickerComponent.defaultProps.id;
        this.name = DatePickerComponent.defaultProps.name;
        this.placeholder = DatePickerComponent.defaultProps.placeholder;
        this.required = DatePickerComponent.defaultProps.required;
        this.inputValue = DatePickerComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isOpen = false;
        this.close = this.close.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.date = this.buildDate(this.inputValue);
    }
    /**
     * @param {?} selectedDate
     * @return {?}
     */
    onSelectDay(selectedDate) {
        this.isOpen = false;
        this.date = selectedDate.date;
        this.inputValue = this.formatDate(selectedDate.date);
        this.onChange(selectedDate.date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    formatDate(date) {
        /** @type {?} */
        const day = date.getDate();
        /** @type {?} */
        const month = date.getMonth() + 1;
        /** @type {?} */
        const dayString = day < 10
            ? `0${day}`
            : day.toString();
        /** @type {?} */
        const monthString = month < 10
            ? `0${month}`
            : month.toString();
        /** @type {?} */
        const yearString = date.getFullYear().toString();
        /** @type {?} */
        const formatedDate = this.format
            .replace('dd', dayString)
            .replace('mm', monthString)
            .replace('yyyy', yearString);
        return formatedDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildDate(value) {
        /** @type {?} */
        const dayStartPosition = this.format.indexOf(DatePickerComponent.DAY_KEY);
        /** @type {?} */
        const monthStartPosition = this.format.indexOf(DatePickerComponent.MONTH_KEY);
        /** @type {?} */
        const yearStartPosition = this.format.indexOf(DatePickerComponent.YEAR_KEY);
        if (dayStartPosition >= 0 && monthStartPosition >= 0 && yearStartPosition >= 0) {
            /** @type {?} */
            const dayEndPosition = dayStartPosition + DatePickerComponent.DAY_KEY.length;
            /** @type {?} */
            const monthEndPosition = monthStartPosition + DatePickerComponent.MONTH_KEY.length;
            /** @type {?} */
            const yearEndPosition = yearStartPosition + DatePickerComponent.YEAR_KEY.length;
            /** @type {?} */
            const dayString = value.substring(dayStartPosition, dayEndPosition);
            /** @type {?} */
            const monthString = value.substring(monthStartPosition, monthEndPosition);
            /** @type {?} */
            const yearString = value.substring(yearStartPosition, yearEndPosition);
            if (dayString && monthString && yearString) {
                /** @type {?} */
                const day = Number(dayString);
                /** @type {?} */
                const month = Number(monthString) - 1;
                /** @type {?} */
                const year = Number(yearString);
                return new Date(year, month, day);
            }
        }
        return new Date();
    }
    /**
     * @return {?}
     */
    open() {
        this.isOpen = true;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.backdropRef.nativeElement.addEventListener('click', this.close);
        }), 0);
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputChange(value) {
        this.date = this.buildDate(value);
        this.onChange(this.date);
    }
    /**
     * @return {?}
     */
    onInputFocus() {
        this.onTouched();
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.date = value;
        this.inputValue = this.formatDate(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
    }
    /**
     * @return {?}
     */
    onTouched() { }
}
DatePickerComponent.DAY_KEY = 'dd';
DatePickerComponent.MONTH_KEY = 'mm';
DatePickerComponent.YEAR_KEY = 'yyyy';
DatePickerComponent.defaultProps = {
    autocomplete: 'none',
    className: '',
    date: new Date(),
    disabled: false,
    displayOtherMonthDays: true,
    floatLabel: '',
    format: 'dd-mm-yyyy',
    fullSize: false,
    hasCounter: false,
    id: null,
    maxLength: 500,
    name: '',
    placeholder: '',
    required: false,
    type: INPUT_TYPE.TEXT,
    value: ''
};
DatePickerComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatePickerComponent))
                    }],
                selector: `${config.components.prefix}-datepicker }`,
                template: "<div [ngClass]=\"[prefix + '-datepicker', className]\" [class.full-size]=\"fullSize\">\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-datepicker-backdrop'\"></div>\n\n  <materialize-input\n    [disabled]=\"disabled\"\n    [floatLabel]=\"floatLabel\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"inputValue\"\n\n    (onChange)=\"onInputChange($event)\"\n    (onFocus)=\"onInputFocus()\"\n  >\n    <materialize-button (onClick)=\"open()\"\n      materializeSuffix\n      [className]=\"prefix + '-datepicker-button'\"\n      [disabled]=\"disabled\"\n    >\n      <materialize-icon [className]=\"prefix + '-datepicker-button'\">calendar_today</materialize-icon>\n    </materialize-button>\n  </materialize-input>\n\n  <materialize-calendar *ngIf=\"isOpen\"\n    [className]=\"prefix + '-datepicker-calendar'\"\n    [date]=\"date\"\n    (onSelectDay)=\"onSelectDay($event)\">\n  </materialize-calendar>\n</div>\n"
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [];
DatePickerComponent.propDecorators = {
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    displayOtherMonthDays: [{ type: Input }],
    floatLabel: [{ type: Input }],
    format: [{ type: Input }],
    fullSize: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    inputValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatePickerComponent.DAY_KEY;
    /** @type {?} */
    DatePickerComponent.MONTH_KEY;
    /** @type {?} */
    DatePickerComponent.YEAR_KEY;
    /** @type {?} */
    DatePickerComponent.defaultProps;
    /** @type {?} */
    DatePickerComponent.prototype.backdropRef;
    /** @type {?} */
    DatePickerComponent.prototype.className;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    DatePickerComponent.prototype.floatLabel;
    /** @type {?} */
    DatePickerComponent.prototype.format;
    /** @type {?} */
    DatePickerComponent.prototype.fullSize;
    /** @type {?} */
    DatePickerComponent.prototype.id;
    /** @type {?} */
    DatePickerComponent.prototype.name;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.required;
    /** @type {?} */
    DatePickerComponent.prototype.inputValue;
    /** @type {?} */
    DatePickerComponent.prototype.prefix;
    /** @type {?} */
    DatePickerComponent.prototype.date;
    /** @type {?} */
    DatePickerComponent.prototype.isOpen;
}
//# sourceMappingURL=data:application/json;base64,