/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { CollapsibleComponent } from '../collapsible/collapsible.component';
import { config } from '../../config';
export class AccordionComponent {
    constructor() {
        this.className = AccordionComponent.defaultProps.className;
        this.onToggleEmitter = new EventEmitter();
        this.activeIndex = AccordionComponent.defaultProps.activeIndex;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.collapsibles.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.onOpenEmitter.subscribe((/**
             * @return {?}
             */
            () => {
                this.toggleCollapsibles(index);
            }));
        }));
    }
    /**
     * @param {?} currentIndex
     * @return {?}
     */
    toggleCollapsibles(currentIndex) {
        this.activeIndex = currentIndex;
        this.onToggleEmitter.emit(this.activeIndex);
        this.collapsibles.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            if (index === currentIndex) {
                item.open();
            }
            else {
                item.close();
            }
        }));
    }
    /**
     * @return {?}
     */
    showNext() {
        /** @type {?} */
        const nextIndex = this.activeIndex + 1;
        this.toggleCollapsibles(nextIndex);
    }
    /**
     * @return {?}
     */
    showPrev() {
        /** @type {?} */
        const prevIndex = this.activeIndex - 1;
        this.toggleCollapsibles(prevIndex);
    }
}
AccordionComponent.defaultProps = {
    activeIndex: 0,
    className: ''
};
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-accordion }`,
                template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-collapsible\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    collapsibles: [{ type: ContentChildren, args: [CollapsibleComponent,] }],
    onToggleEmitter: [{ type: Output, args: ['onToggle',] }],
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AccordionComponent.defaultProps;
    /** @type {?} */
    AccordionComponent.prototype.collapsibles;
    /** @type {?} */
    AccordionComponent.prototype.onToggleEmitter;
    /** @type {?} */
    AccordionComponent.prototype.className;
    /** @type {?} */
    AccordionComponent.prototype.activeIndex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBRUwsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU10QyxNQUFNLE9BQU8sa0JBQWtCO0lBYzdCO1FBSlMsY0FBUyxHQUFXLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFLckUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTFDLElBQUksQ0FBQyxXQUFXLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztJQUNqRSxDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVM7OztZQUFDLEdBQUcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLFlBQW9CO1FBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDO1FBRWhDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7O1FBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxLQUFLLEtBQUssWUFBWSxFQUFFO2dCQUMxQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZDtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFFBQVE7O2NBQ0EsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQztRQUV0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7OztJQUVELFFBQVE7O2NBQ0EsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQztRQUV0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7QUFuRGUsK0JBQVksR0FBbUI7SUFDN0MsV0FBVyxFQUFFLENBQUM7SUFDZCxTQUFTLEVBQUUsRUFBRTtDQUNkLENBQUM7O1lBUkgsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxHQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTyxjQUFjO2dCQUNyRCxtSEFBeUM7YUFDMUM7Ozs7OzJCQU9FLGVBQWUsU0FBQyxvQkFBb0I7OEJBRXBDLE1BQU0sU0FBQyxVQUFVO3dCQUVqQixLQUFLOzs7O0lBVE4sZ0NBR0U7O0lBRUYsMENBQXFGOztJQUVyRiw2Q0FBaUU7O0lBRWpFLHVDQUF1RTs7SUFFdkUseUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjb3JkaW9uTW9kZWwgfSBmcm9tICcuL2FjY29yZGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbGxhcHNpYmxlL2NvbGxhcHNpYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1hY2NvcmRpb24gfWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY2NvcmRpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFjY29yZGlvbk1vZGVsLCBBZnRlckNvbnRlbnRJbml0IHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogQWNjb3JkaW9uTW9kZWwgPSB7XG4gICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ29sbGFwc2libGVDb21wb25lbnQpIGNvbGxhcHNpYmxlczogUXVlcnlMaXN0PENvbGxhcHNpYmxlQ29tcG9uZW50PjtcblxuICBAT3V0cHV0KCdvblRvZ2dsZScpIG9uVG9nZ2xlRW1pdHRlcjogRXZlbnRFbWl0dGVyPG51bWJlciB8IG51bGw+O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gQWNjb3JkaW9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG5cbiAgcHVibGljIGFjdGl2ZUluZGV4OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5vblRvZ2dsZUVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gQWNjb3JkaW9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5hY3RpdmVJbmRleDtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLmNvbGxhcHNpYmxlcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaXRlbS5vbk9wZW5FbWl0dGVyLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2libGVzKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdG9nZ2xlQ29sbGFwc2libGVzKGN1cnJlbnRJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IGN1cnJlbnRJbmRleDtcblxuICAgIHRoaXMub25Ub2dnbGVFbWl0dGVyLmVtaXQodGhpcy5hY3RpdmVJbmRleCk7XG5cbiAgICB0aGlzLmNvbGxhcHNpYmxlcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaXRlbS5vcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzaG93TmV4dCgpIHtcbiAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLmFjdGl2ZUluZGV4ICsgMTtcblxuICAgIHRoaXMudG9nZ2xlQ29sbGFwc2libGVzKG5leHRJbmRleCk7XG4gIH1cblxuICBzaG93UHJldigpIHtcbiAgICBjb25zdCBwcmV2SW5kZXggPSB0aGlzLmFjdGl2ZUluZGV4IC0gMTtcblxuICAgIHRoaXMudG9nZ2xlQ29sbGFwc2libGVzKHByZXZJbmRleCk7XG4gIH1cbn1cbiJdfQ==